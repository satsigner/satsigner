{
  "account": {
    "add": "Add Master Key",
    "addOrGenerateKeys": "Add or Generate your keys",
    "added": "Parent account has been added",
    "confirmSeed.title": "Confirm Seed",
    "confirmSeed.tryAgain": "Selected word doesn't match the original seed",
    "confirmSeed.warning": "Review and try again",
    "createdOn": "Created on",
    "delete.masterKey": "Delete master key",
    "derivationPath": "Derivation path",
    "duplicate.masterKey": "Duplicate master key",
    "export.config": "Export config",
    "export.descriptors": "Export descriptors",
    "export.labels": "Export labels",
    "export.noLabels.description": "Once you add labels to your transactions, utxos, and addresses, you will be able to export them.",
    "export.noLabels.title": "No labels",
    "fingerprint": "Fingerprint",
    "generate.disclaimer.1": "Anyone with this information can move the sats to another account.",
    "generate.disclaimer.2": "Consider an air-gapped hardware device for generating keys for significant amounts.",
    "generate.disclaimer.3": "Losing this information will lose the funds.",
    "generate.multi.title": "Generate Keys",
    "generate.title": "Generate new secret seed",
    "generate.warning": "Keep this information secret and backed up.",
    "hasAccountWithName": "Account with that name already exists",
    "import.descriptor": "Import Descriptor",
    "import.existingSingleWallet": "Exisiting Single Key Wallets",
    "import.fromOtherWallet": "Select From Other Wallets",
    "import.labels": "Import labels",
    "import.multi.title": "Import Keys",
    "import.title": "Import existing seed",
    "import.title2": "Import seed",
    "import.watchOnly.title": "Import watch-only",
    "import.wif.title": "Import WIF (single key)",
    "import.word.noMatch": "No matching words",
    "load.sample.address": "Load sample watch-only address",
    "load.sample.legacy": "Load sample Legacy wallet",
    "load.sample.segwit": "Load sample SegWit wallet",
    "load.sample.xpub": "Load sample watch-only",
    "mnemonic.12": "12 words generated from 128 bits of entropy. For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.15": "15 words generated from 160 bits of entropy. For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.18": "18 words generated from 192 bits of entropy.  For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.21": "21 words generated from 224 bits of entropy.  For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.24": "24 words generated from 256 bits of entropy.",
    "mnemonic.title": "Mnemonic Seed Words (BIP39)",
    "multiPartyContract": "Multi-Party Contract",
    "multisig.create": "Creating Multisig Wallet",
    "multisig.created": "Multisig Wallet Created",
    "multisig.creating": "Creating MultiSig Wallet",
    "multisig.gotoWallet": "Go to Wallet",
    "multisig.viewAllWallet": "View ALl Wallets",
    "name": "Account Name",
    "network.description": "Use the %{network} network",
    "network.title": "Network",
    "parentAccountActivity": "Parent Account Activity",
    "participant.keyName": "Key Name",
    "policy.multiSignature": "Multi Signature",
    "policy.multiSignatureDescription": "Lorem ipsum",
    "policy.singleSignature": "Single Signature",
    "policy.singleSignatureDescription": "To solve this script, the owner of the hashed public key above needs to provide the original public key, along with a valid signature for it.",
    "policy.title": "Policy Type",
    "receive": "Receive",
    "replace.key": "Replace key",
    "script": "Script Version",
    "seed.dropAndKeep": "Drop Seed And Keep Xpub",
    "seed.external": "External Public Descriptor",
    "seed.importedSeed": "Imported Seed %{name}",
    "seed.keepItSecret": "Keep it secret",
    "seed.newSeed": "New Seed %{name}",
    "seed.noLabel": "No Label",
    "seed.publicKey": "xpub/zpub",
    "seed.shareDescriptor": "Share Descriptor",
    "seed.sharePub": "Share XPub",
    "seed.unableToDecrypt": "Unable to decrypt seed",
    "selectKeySource": "Select Key Source",
    "settings.title": "Master Key Settings and Tools",
    "signAndSend": "Sign & Send",
    "signatureRequired": "Signatures Required",
    "syncFailed": "Failed to sync wallet. Make sure you have internet connection.",
    "utxos": "UTXOs",
    "viewSeed": "View seed"
  },
  "accounts": {
    "address": "Address",
    "change": "Change",
    "childAccounts": "Child\nAccounts",
    "empty": "No keys yet",
    "index": "Index",
    "label": "Label",
    "receive": "Receive",
    "satsInMempool": "Sats in\nMempool",
    "spendableOutputs": "Spendable\nOutputs",
    "totalTransactions": "Total\nTransactions",
    "txs": "Txs",
    "unspentSats": "Unspent Sats"
  },
  "app": {
    "name": "Sat Signer",
    "notImplemented": "Not yet implemented"
  },
  "auth": {
    "confirmPin": "Confirm pin number",
    "pinsDontMatch": "No pin number match",
    "pinsMatch": "Pin number match",
    "reenterPinTitle": "Re-enter your\npin number",
    "setPin": "Set pin number",
    "setPinLater": "Set pin later",
    "setPinTitle": "Set pin number to\nenter the app",
    "triesLeft": "Tries left",
    "tryLeft": "Try left",
    "unlock": "Unlock Satsigner"
  },
  "bitcoin": {
    "block": "Block",
    "blockHeight": "Block Height",
    "blocks": "Blocks",
    "checksum": "Checksum",
    "confirmations.manyBlocks": "Blocks deep",
    "confirmations.oneBlock": "Block deep",
    "confirmations.unconfirmed": "Unconfirmed",
    "cpfp": "Child Pays For Parents",
    "fingerprint": "Fingerprint",
    "network.mainnet": "Mainnet",
    "network.signet": "Signet",
    "network.testnet": "Testnet",
    "notYourCoins": "Not your coins",
    "notYourKeys": "Not your keys",
    "passphrase": "Passphrase",
    "rbf": "Replace By Fee",
    "sat": "sat",
    "satVb": "sat/vB",
    "sats": "sats",
    "satsVb": "sats/vB",
    "word": "Word",
    "words": "Words"
  },
  "camera": {
    "enableCameraAccess": "Enable Camera Access",
    "permissions": "Enable camera access in your phone's settings to scan a QR code.",
    "scanQRCode": "Scan QRCode",
    "scanText": "Scan any Bitcoin or Lightning related QR code."
  },
  "common": {
    "acknowledge": "Acknowledge",
    "addTag": "Add tag",
    "amount": "Amount",
    "areYouSure": "Are you sure?",
    "backToAccountHome": "Back to account home",
    "cancel": "Cancel",
    "clear": "Clear",
    "close": "Close",
    "confirm": "Confirm",
    "continue": "Continue",
    "copiedToClipboard": "Copied to clipboard",
    "copy": "Copy",
    "copyToClipboard": "Copy to clipboard",
    "create": "Create",
    "createTag": "Create tag %{tag}",
    "date": "Date",
    "description": "Description",
    "descriptor": "Descriptor",
    "deselectAll": "Deselect All",
    "download": "Download",
    "downloadFile": "Download file",
    "from": "From",
    "goBack": "Go back",
    "importFromClipboard": "Import from clipboard",
    "invalid": "Invalid",
    "key": "Key",
    "label": "Label",
    "less": "Less",
    "loading": "Loading",
    "max": "Max",
    "more": "More",
    "next": "Next",
    "no": "No",
    "of": "Of",
    "off": "Off",
    "on": "On",
    "optional": "Optional",
    "paste": "Paste",
    "pasteFromClipboard": "Paste from clipboard",
    "remove": "Remove",
    "save": "Save",
    "select": "Select",
    "selectAll": "Select All",
    "selected": "Selected",
    "tags": "Tags",
    "total": "Total",
    "valid": "Valid",
    "version": "Version",
    "warning": "Warning",
    "yes": "Yes"
  },
  "date": {
    "date": "Date",
    "day": "day",
    "days": "days",
    "hour": "hour",
    "hours": "hours",
    "minute": "minute",
    "minutes": "minutes",
    "month": "month",
    "months": "months",
    "year": "year",
    "years": "years"
  },
  "export": {
    "file.name.descriptors": "Descriptors",
    "file.name.labels": "Labels",
    "file.save": "Save file"
  },
  "files": {
    "csv": "CSV",
    "json": "JSON"
  },
  "import": {
    "from": "Import from %{name}"
  },
  "navigation": {
    "item.bitcoin": "Bitcoin",
    "item.block": "Block",
    "item.chain": "Chain",
    "item.chaintip": "Chaintip",
    "item.currency": "Currency",
    "item.difficult": "Difficulty",
    "item.ecash": "ECash",
    "item.energy": "Energy",
    "item.halving": "Halving",
    "item.lightning": "Lightning",
    "item.liquid": "Liquid",
    "item.mempool": "Mempool",
    "item.nostr": "Nostr",
    "item.time": "Time",
    "label.converter": "Converter",
    "label.explorer": "Explorer",
    "label.signer": "Signer"
  },
  "opcode": {
    "DATA": "Data which can be hash, pubkey, address, signature, etc.",
    "OP_0NOTEQUAL": "Returns 0 if the input is 0. 1 otherwise.",
    "OP_1ADD": "1 is added to the input.",
    "OP_1NEGATE": "The number -1 is pushed onto the stack.",
    "OP_1SUB": "1 is subtracted from the input.",
    "OP_2DIV": "The input is divided by 2.",
    "OP_2DROP": "Removes the top two stack items.",
    "OP_2DUP": "Duplicates the top two stack items.",
    "OP_2MUL": "The input is multiplied by 2.",
    "OP_2OVER": "Copies the pair of items two spaces back in the stack to the front.",
    "OP_2ROT": "The fifth and sixth items back are moved to the top of the stack.",
    "OP_2SWAP": "Swaps the top two pairs of items.",
    "OP_3DUP": "Duplicates the top three stack items.",
    "OP_ABS": "The input is made positive.",
    "OP_ADD": "a is added to b.",
    "OP_AND": "Boolean and between each bit in the inputs.",
    "OP_BOOLAND": "If both a and b are not 0, the output is 1. Otherwise 0.",
    "OP_BOOLOR": "If a or b is not 0, the output is 1. Otherwise 0.",
    "OP_CAT": "Concatenates two strings.",
    "OP_CHECKLOCKTIMEVERIFY": "Marks transaction as invalid if the top stack item is greater than the transaction's nLockTime field, otherwise script evaluation continues as though an OP_NOP was executed. Transaction is also invalid if 1. the stack is empty; or 2. the top stack item is negative; or 3. the top stack item is greater than or equal to 500000000 while the transaction's nLockTime field is less than 500000000, or vice versa; or 4. the input's nSequence field is equal to 0xffffffff. The precise semantics are described in BIP 0065.",
    "OP_CHECKMULTISIG": "Compares the first signature against each public key until it finds an ECDSA match. Starting with the subsequent public key, it compares the second signature against each remaining public key until it finds an ECDSA match. The process is repeated until all signatures have been checked or not enough public keys remain to produce a successful result. All signatures need to match a public key. Because public keys are not checked again if they fail any signature comparison, signatures must be placed in the scriptSig using the same order as their corresponding public keys were placed in the scriptPubKey or redeemScript. If all signatures are valid, 1 is returned, 0 otherwise. Due to a bug, one extra unused value is removed from the stack.",
    "OP_CHECKMULTISIGVERIFY": "Same as OP_CHECKMULTISIG, but OP_VERIFY is executed afterward.",
    "OP_CHECKSEQUENCEVERIFY": "Marks transaction as invalid if the relative lock time of the input (enforced by BIP 0068 with nSequence) is not equal to or longer than the value of the top stack item. The precise semantics are described in BIP 0112.",
    "OP_CHECKSIG": "The entire transaction's outputs, inputs, and script (from the most recently-executed OP_CODESEPARATOR to the end) are hashed. The signature used by OP_CHECKSIG must be a valid signature for this hash and public key. If it is, 1 is returned, 0 otherwise.",
    "OP_CHECKSIGADD": "Opcode added by BIP342 (Tapscript)",
    "OP_CHECKSIGVERIFY": "Same as OP_CHECKSIG, but OP_VERIFY is executed afterward.",
    "OP_CODESEPARATOR": "All of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR.",
    "OP_DEPTH": "Puts the number of stack items onto the stack.",
    "OP_DIV": "a is divided by b.",
    "OP_DROP": "Removes the top stack item.",
    "OP_DUP": "Duplicates the top stack item.",
    "OP_ELSE": "If the preceding OP_IF or OP_NOTIF or OP_ELSE was not executed then these statements are and if the preceding OP_IF or OP_NOTIF or OP_ELSE was executed then these statements are not.",
    "OP_ENDIF": "Ends an if/else block. All blocks must end, or the transaction is invalid. An OP_ENDIF without OP_IF earlier is also invalid.",
    "OP_EQUAL": "Returns 1 if the inputs are exactly equal, 0 otherwise.",
    "OP_EQUALVERIFY": "Same as OP_EQUAL, but runs OP_VERIFY afterward.",
    "OP_FALSE": "An empty array of bytes is pushed onto the stack (This is not a no-op: an item is added to the stack).",
    "OP_FROMALTSTACK": "Puts the input onto the top of the main stack. Removes it from the alt stack.",
    "OP_GREATERTHAN": "Returns 1 if a is greater than b, 0 otherwise.",
    "OP_GREATERTHANOREQUAL": "Returns 1 if a is greater than or equal to b, 0 otherwise.",
    "OP_HASH160": "The input is hashed twice: first with SHA-256 and then with RIPEMD-160.",
    "OP_HASH256": "The input is hashed two times with SHA-256.",
    "OP_IF": "If the top stack value is not False, the statements are executed. The top stack value is removed.",
    "OP_IFDUP": "If the top stack value is not 0, duplicate it.",
    "OP_INVALIDOPCODE": "Invalid code",
    "OP_INVERT": "Flips all of the bits in the input.",
    "OP_LEFT": "Keeps only characters left of the specified point in a string.",
    "OP_LESSTHAN": "Returns 1 if a is less than b, 0 otherwise.",
    "OP_LESSTHANOREQUAL": "Returns 1 if a is less than or equal to b, 0 otherwise.",
    "OP_LSHIFT": "Shifts a left b bits, preserving sign.",
    "OP_MAX": "Returns the larger of a and b.",
    "OP_MIN": "Returns the smaller of a and b.",
    "OP_MOD": "Returns the remainder after dividing a by b.",
    "OP_MUL": "a is multiplied by b.",
    "OP_N": "The number in the word name (1-16) is pushed onto the stack.",
    "OP_NEGATE": "The sign of the input is flipped.",
    "OP_NIP": "Removes the second-to-top stack item.",
    "OP_NOP": "Does nothing.",
    "OP_NOP1": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP10": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP2": "OP_CHECKLOCKTIMEVERIFY.",
    "OP_NOP3": "OP_CHECKSEQUENCEVERIFY alias",
    "OP_NOP4": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP5": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP6": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP7": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP8": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP9": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOT": "If the input is 0 or 1, it is flipped. Otherwise the output will be 0.",
    "OP_NOTIF": "If the top stack value is False, the statements are executed. The top stack value is removed.",
    "OP_NUMEQUAL": "Returns 1 if the numbers are equal, 0 otherwise.",
    "OP_NUMEQUALVERIFY": "Same as OP_NUMEQUAL, but runs OP_VERIFY afterward.",
    "OP_NUMNOTEQUAL": "Returns 1 if the numbers are not equal, 0 otherwise.",
    "OP_OR": "Boolean or between each bit in the inputs.",
    "OP_OVER": "Copies the second-to-top stack item to the top.",
    "OP_PICK": "The item n back in the stack is copied to the top.",
    "OP_PUSH": "The next opcode bytes is data to be pushed onto the stack",
    "OP_PUSHDATA1": "The next byte contains the number of bytes to be pushed onto the stack.",
    "OP_PUSHDATA2": "The next two bytes contain the number of bytes to be pushed onto the stack in little endian order.",
    "OP_PUSHDATA4": "The next four bytes contain the number of bytes to be pushed onto the stack in little endian order.",
    "OP_RESERVED": "Transaction is invalid unless occuring in an unexecuted OP_IF branch",
    "OP_RESERVED1": "Transaction is invalid unless occuring in an unexecuted OP_IF branch.",
    "OP_RESERVED2": "Transaction is invalid unless occuring in an unexecuted OP_IF branch.",
    "OP_RETURN": "Marks transaction as invalid. Since bitcoin 0.9, a standard way of attaching extra data to transactions is to add a zero-value output with a scriptPubKey consisting of OP_RETURN followed by data. Such outputs are provably unspendable and specially discarded from storage in the UTXO set, reducing their cost to the network. Since 0.12, standard relay rules allow a single output with OP_RETURN, that contains any sequence of push statements (or OP_RESERVED[1]) after the OP_RETURN provided the total scriptPubKey length is at most 83 bytes.",
    "OP_RIGHT": "Keeps only characters right of the specified point in a string.",
    "OP_RIPEMD160": "The input is hashed using RIPEMD-160.",
    "OP_ROLL": "The item <em>n</em> back in the stack is moved to the top.",
    "OP_ROT": "The 3rd item down the stack is moved to the top.",
    "OP_RSHIFT": "Shifts a right b bits, preserving sign.",
    "OP_SHA1": "The input is hashed using SHA-1.",
    "OP_SHA256": "The input is hashed using SHA-256.",
    "OP_SIZE": "Pushes the string length of the top element of the stack (without popping it).",
    "OP_SUB": "b is subtracted from a.",
    "OP_SUBSTR": "Returns a section of a string.",
    "OP_SWAP": "The top two items on the stack are swapped.",
    "OP_TOALTSTACK": "Puts the input onto the top of the alt stack. Removes it from the main stack.",
    "OP_TRUE": "The number 1 is pushed onto the stack.",
    "OP_TUCK": "The item at the top of the stack is copied and inserted before the second-to-top item.",
    "OP_VER": "Transaction is invalid unless occuring in an unexecuted OP_IF branch.",
    "OP_VERIF": "Transaction is invalid even when occuring in an unexecuted OP_IF branch.",
    "OP_VERIFY": "Marks transaction as invalid if top stack value is not true. The top stack value is removed.",
    "OP_VERNOTIF": "Transaction is invalid even when occuring in an unexecuted OP_IF branch.",
    "OP_WITHIN": "Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.",
    "OP_XOR": "Boolean exclusive or between each bit in the inputs. <em>disabled</em>."
  },
  "preview": {},
  "receive": {
    "address": "Address",
    "customAmount": "Custom amount",
    "generateAnother": "Generate another address",
    "label": "Label",
    "neverUsed": "Never used",
    "path": "Path"
  },
  "script": {
    "p2pkh.description.1": "Legacy",
    "p2pkh.description.2": "which locks bitcoin to the hash of a public key.",
    "p2pkh.link.name": "ScriptPubKey",
    "p2pkh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2pkh.name": "Legacy",
    "p2sh-p2wpkh.description.1": "Nested Segwit",
    "p2sh-p2wpkh.description.2": "which locks bitcoin to a SegWit witness program wrapped inside a P2SH address. This allows SegWit compatibility with wallets or services that do not fully support SegWit.",
    "p2sh-p2wpkh.link.name": "ScriptPubKey",
    "p2sh-p2wpkh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2sh-p2wpkh.name": "Nested Segwit",
    "p2tr.description.1": "Taproot",
    "p2tr.description.2": "which locks bitcoin to a Schnorr public key or a Merkle root of multiple conditions. It enhances privacy and efficiency by combining spending conditions into a single structure.",
    "p2tr.link.name": "ScriptPubKey",
    "p2tr.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2tr.name": "Taproot",
    "p2wpkh.description.1": "Native Segwit",
    "p2wpkh.description.2": "which locks bitcoin to a SegWit witness program. It offers reduced transaction fees and improved malleability resistance.",
    "p2wpkh.link.name": "ScriptPubKey",
    "p2wpkh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2wpkh.name": "Native Segwit"
  },
  "send": {},
  "sent": {
    "broadcasted": "Message broadcasted",
    "copyTransactionId": "Copy transaction id",
    "trackOnChain": "trackOnChain"
  },
  "settings": {
    "about.description": "App version and other versioning information",
    "about.title": "About",
    "developer.accountsDeleted": "Accounts deleted",
    "developer.deleteAccounts": "Delete accounts",
    "developer.description": "Available in dev mode only. Useful tools for developers for faster development",
    "developer.setPinFirstTime": "Set PIN first time",
    "developer.skipPin": "Skip PIN",
    "developer.title": "Developer",
    "features.charts.historyChart.description": "Control the visible layers and navigation of the transaction history chart",
    "features.charts.historyChart.layers.showAmounts": "Show Amounts",
    "features.charts.historyChart.layers.showLabels": "Show Labels",
    "features.charts.historyChart.layers.showOutputFields": "Show Output Fields",
    "features.charts.historyChart.layers.showTransactionInfo": "Show Transaction Info",
    "features.charts.historyChart.layers.title": "Layers",
    "features.charts.historyChart.navigation.lockZoomXAxis": "Lock Zoom To X-Axis",
    "features.charts.historyChart.navigation.title": "Navigation",
    "features.charts.historyChart.title": "History Chart",
    "features.currencyFormatting.description": "Currency display and formatting",
    "features.currencyFormatting.showZeroPadding": "Show 0.00.. padding",
    "features.currencyFormatting.title": "Currency Formatting",
    "features.description": "Reveal more or less information about the app and the bitcoin protocol.",
    "features.title": "Features",
    "network.backend": "Backend",
    "network.description": "Connect to a node to communicate with the bitcoin main network, testnet or signet",
    "network.network": "Network",
    "network.retries": "Retries",
    "network.server.modal.title": "Select server",
    "network.server.warning.text": "Your data requests relating to wallet addresses, transactions, and utxos will go out to potentially untrusted server.",
    "network.server.warning.title": "Warning",
    "network.stopGap": "Stop Gap",
    "network.test": "Test connection",
    "network.timeout": "Timeout",
    "network.title": "Network",
    "network.type.bitcoin": "Bitcoin mainnet",
    "network.type.signet": "Public network used for testing (coins have no value !)",
    "network.type.testnet": "Private network used for testing (coins have no value !)",
    "network.url": "Url",
    "security.backgroundLockTime": "Background lock time threshold",
    "security.description": "Change app wide security settings to protect access in case of a compromised device",
    "security.maxPinTries": "Maximum pin tries",
    "security.title": "App Security",
    "title": "Config"
  },
  "sign": {
    "transaction": "Sign transaction"
  },
  "time": {
    "lessThanAMinute": "Less than a minute"
  },
  "transaction": {
    "address": "Address",
    "block": "In block",
    "build.add.input.title": "Add input",
    "build.add.inputs.title.1": "Add inputs",
    "build.add.inputs.title.2": "Add as input to transaction",
    "build.add.label.title": "Add label",
    "build.add.output.number": "Output %{number}",
    "build.add.output.title": "Add output",
    "build.insufficientSats": "Insufficient sats",
    "build.minerFee": "Miner fee",
    "build.options.autoSelect.utxos.efficiency.description": "Selection of inputs that won't produce dust change and will occupy the least amount of space.",
    "build.options.autoSelect.utxos.efficiency.title": "Efficiency",
    "build.options.autoSelect.utxos.label": "Auto select utxos for",
    "build.options.autoSelect.utxos.privacy.description": "Best possible transaction template that breaks as many heuristics as possible.",
    "build.options.autoSelect.utxos.privacy.title": "Privacy",
    "build.options.autoSelect.utxos.user.description": "Your user selected inputs",
    "build.options.autoSelect.utxos.user.title": "User",
    "build.options.feeControl": "Fee Control",
    "build.options.feeManagement": "Fee Management",
    "build.options.importOutputs.button": "Import",
    "build.options.importOutputs.clipboard": "Paste",
    "build.options.importOutputs.emptyContent": "Preview of outputs will appear here...",
    "build.options.importOutputs.qrcode": "Scan QRCode",
    "build.options.importOutputs.title": "Import Outputs",
    "build.options.timeLock": "Time Lock",
    "build.options.timelock": "Timelock",
    "build.options.title": "Options",
    "build.remove.output.title": "Remove output",
    "build.save.output.title": "Save output",
    "build.select.customAmount": "Custom amount",
    "build.select.spendableOutputs": "Select spendable outputs",
    "build.set.fee": "Set fee",
    "build.set.highestFeePossible": "Set Highest Fee Possible",
    "build.set.minimumAutomaticFee": "Set Minimum Automatic Fee",
    "build.type.customAmount": "Type custom amount for automatic selection",
    "build.type.label": "Type label",
    "build.update.fee.title": "Change fee",
    "build.update.outputs": "Remove or decrease outputs",
    "decoded.description.flag": "This is a 1-byte flag that follows the marker in transactions with witness data. It must be non-zero. It can be interpreted as a bitvector, with the unused bits available for future extensibility for other types of witness data.",
    "decoded.description.locktime": "This is a 4-byte little-endian number that specifies the absolute locktime of the transaction.",
    "decoded.description.marker": "This is a 1-byte marker (required to be '00') that serves as an indicator that the given transaction incorporates Segregated Witness (segwit) data.",
    "decoded.description.txInHash": "This is the hash of the transaction input. Note that the transaction hash here is in big-endian format, whereas in other places it is typically represented in little-endian format.",
    "decoded.description.txInIndex": "This is a 4-byte little-endian integer which represents the index of the specific output in the previous transaction.",
    "decoded.description.txInScript": "This is the unlocking script (scriptSig), providing proof of ownership of the bitcoins being spent.",
    "decoded.description.txInScriptVarInt": "This is a variable integer (VarInt) that denotes the length of the subsequent unlocking script.",
    "decoded.description.txInSequence": "This is a 4-byte little-endian number that specifies the relative locktime of the transaction input.",
    "decoded.description.txInVarInt": "This is a variable integer (VarInt) that denotes the number of subsequent transaction inputs.",
    "decoded.description.txOutScript": "This is the locking script (scriptPubKey), specifying the conditions under which the output can be spent.",
    "decoded.description.txOutScriptNonStandard": "This scriptPubKey is non-standard and therefore cannot be encoded as an address.",
    "decoded.description.txOutScriptStandard": "This scriptPubkey is a standard type and can be encoded as the following address: %{address}",
    "decoded.description.txOutScriptVarInt": "This is a variable integer (VarInt) that denotes the length (in bytes) of the subsequent locking script.",
    "decoded.description.txOutValue": "This is an 8-byte little-endian number that represents the amount of bitcoin to be sent in satoshis.",
    "decoded.description.txOutVarInt": "This is a variable integer (VarInt) that denotes the number of subsequent transaction outputs.",
    "decoded.description.version": "This is a 4-byte little-endian integer, representing the transaction version.",
    "decoded.description.witnessItem": "This is a witness item.",
    "decoded.description.witnessItemEmpty": "This witness item is empty.",
    "decoded.description.witnessItemPubkey": "This witness item is a public key.",
    "decoded.description.witnessItemScript": "This witness item is a script.",
    "decoded.description.witnessItemSignature": "This witness item is a signature.",
    "decoded.description.witnessItemsVarInt": "This is a variable integer (VarInt) that denotes the length (in bytes) of the subsequent witness item.",
    "decoded.description.witnessVarInt": "This is a variable integer (VarInt) that indicates the number of witness items for the transaction input. Note that each segwit input has its own witnessVarInt. The order of the witness items is the same as the order of the transaction inputs.",
    "decoded.empty": "The script is empty",
    "decoded.error": "Unable to decode the script",
    "decoded.label.flag": "Flag",
    "decoded.label.locktime": "LockTime",
    "decoded.label.marker": "Marker",
    "decoded.label.txInHash": "Input previous tx hash (input %{input})",
    "decoded.label.txInIndex": "Input previous output index (input %{input})",
    "decoded.label.txInScript": "Input signature script (input %{input})",
    "decoded.label.txInScriptVarInt": "Input script length (input %{input})",
    "decoded.label.txInSequence": "Input sequence (input %{input})",
    "decoded.label.txInVarInt": "Input count",
    "decoded.label.txOutScript": "Output unlocking script (output %{output})",
    "decoded.label.txOutScriptNonStandard": "Output unlocking script (output %{output})",
    "decoded.label.txOutScriptStandard": "Output unlocking script (output %{output})",
    "decoded.label.txOutScriptVarInt": "Output script length (output %{output})",
    "decoded.label.txOutValue": "Output value (output %{output})",
    "decoded.label.txOutVarInt": "Output count",
    "decoded.label.version": "Version",
    "decoded.label.witnessItem": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemEmpty": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemPubkey": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemScript": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemSignature": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemsVarInt": "Witness item length (input %{input} witness %{witness})",
    "decoded.label.witnessVarInt": "Witness count",
    "decoded.title": "Decoded",
    "details.title": "Transaction details",
    "edit.label.transaction": "Edit transaction label",
    "edit.label.utxo": "Edit UTXO label",
    "fee": "Fee",
    "feeBytes": "Fee sat/b",
    "feeVBytes": "Fee sat/vb",
    "hash": "Hash",
    "id": "Transaction id",
    "input.count": "Number of inputs",
    "input.plural": "Inputs",
    "input.previousOutput.transaction": "Previous transaction output hash",
    "input.previousOutput.vout": "Output index in transaction",
    "input.scriptSig": "ScriptSig",
    "input.sequence": "Sequence",
    "input.singular": "Input",
    "input.title": "Input",
    "label": "Label",
    "noLabel": "No label",
    "noTags": "No tags",
    "output.count": "Number of outputs",
    "output.title": "Output",
    "size": "Raw size",
    "txid": "Txid",
    "unlockingScript": "Unlocking script",
    "value": "Value",
    "version": "Version",
    "vout": "Out",
    "vsize": "Virtual size",
    "weight": "Weight"
  },
  "upcoming": {
    "bitcoin.description": "Visualise the latest blocks and mempool key points",
    "bitcoin.title": "Bitcoin Features",
    "block.description": "Visualise the latest blocks and mempool key points",
    "block.title": "Block Features",
    "chain.description": "Visualise the latest blocks and mempool key points",
    "chain.title": "Chain Features",
    "chaintip.description": "Visualise the latest blocks and mempool key points",
    "chaintip.title": "Chaintip Features",
    "currency.description": "Visualise the latest blocks and mempool key points",
    "currency.title": "Currency Features",
    "description": "Visualise the latest blocks and mempool key points",
    "difficult.description": "Visualise the latest blocks and mempool key points",
    "difficult.title": "Difficulty Features",
    "ecash.description": "Visualise the latest blocks and mempool key points",
    "ecash.title": "ECash Features",
    "energy.description": "Visualise the latest blocks and mempool key points",
    "energy.title": "Energy Features",
    "halving.description": "Visualise the latest blocks and mempool key points",
    "halving.title": "Halving Features",
    "lightning.description": "Visualise the latest blocks and mempool key points",
    "lightning.description_1": "Visualise the latest blocks and mempool key points_001",
    "lightning.description_2": "Visualise the latest blocks and mempool key points_002",
    "lightning.description_3": "Visualise the latest blocks and mempool key points_003",
    "lightning.description_4": "Visualise the latest blocks and mempool key points_004",
    "lightning.title": "Lightning Features",
    "lightning.title_1": "Lightning Features_001",
    "lightning.title_2": "Lightning Features_002",
    "lightning.title_3": "Lightning Features_003",
    "lightning.title_4": "Lightning Features_004",
    "liquid.description": "Visualise the latest blocks and mempool key points",
    "liquid.title": "Liquid Features",
    "mempool.description": "Visualise the latest blocks and mempool key points",
    "mempool.title": "Mempool Features",
    "name": "Coming Soon",
    "nostr.description": "Visualise the latest blocks and mempool key points",
    "nostr.title": "Nostr Features",
    "time.description": "Compare different calendars against block time",
    "time.title": "Time Features",
    "title": "Upcoming Feature"
  },
  "utxo": {
    "address": "Address",
    "details.title": "UTXO Details",
    "group": "Group",
    "label": "Label",
    "noLabel": "No label",
    "outputIndex": "Output Index",
    "unlockingScript": "Unlocking script"
  },
  "validation": {
    "invalid": "Invalid input",
    "number.greater": "The value must be greather than %{value}",
    "number.smaller": "The value must be smaller than %{value}",
    "required": "*required*"
  },
  "watchonly": {
    "address.label": "Address",
    "address.text": "A single bitcoin address",
    "address.title": "Address",
    "descriptor.external": "External Descriptor",
    "descriptor.internal": "Interal Descriptor (optional)",
    "descriptor.label": "Descriptor",
    "descriptor.text": "A Bitcoin descriptor is a flexible and expressive way to describe how Bitcoin addresses and keys are derived and used within a wallet. Introduced in BIP 174, descriptors allow users to specify the structure of their wallets in a more human-readable format. They can represent various types of addresses, including standard pay-to-public-key-hash (P2PKH), pay-to-script-hash (P2SH), and more complex constructions such as multisig. Descriptors improve wallet interoperability and make it easier for software to understand how to derive keys and addresses based on user-defined rules.",
    "descriptor.title": "Descriptor",
    "fingerprint.label": "Master Fingerprint",
    "fingerprint.text": "Fingerprint",
    "inputPlaceholder": "Enter %{option}",
    "read.clipboard": "Paste from clibpoard",
    "read.computerVision": "Computer Vision text",
    "read.nfc": "Tap NFC",
    "read.qrcode": "Scan qrcode",
    "titleModal": "Watch-only wallet",
    "xpub.label": "XPUB / YPUB / ZPUB",
    "xpub.text": "An extended public key is a type of key used in Bitcoin that allows for the generation of multiple public addresses from a single key. It is part of the hierarchical deterministic (HD) wallet structure defined by BIP32. An xpub can generate child public keys, which can be used to receive funds without exposing the corresponding private keys. This feature is useful for managing multiple addresses while maintaining privacy and security, as users can receive payments at different addresses without needing to create new wallets or expose sensitive information.",
    "xpub.title": "Extended Public Key"
  }
}
