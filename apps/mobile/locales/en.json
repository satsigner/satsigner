{
  "account": {
    "accountKeys": "Account Keys",
    "add": "Add Account",
    "addOrGenerateKeys": "Add or Generate Keys",
    "added": "Parent account has been added",
    "confirmSeed.confirmSkip": "Do you really want to skip it?",
    "confirmSeed.title": "Confirm Seed",
    "confirmSeed.tryAgain": "Selected word doesn't match the original seed",
    "confirmSeed.warning": "Review and try again",
    "createdOn": "Created on",
    "delete.title": "Delete Account",
    "derivationPath": "Derivation path",
    "descriptor.checksum": "Checksum",
    "descriptor.components": "Descriptor Components",
    "descriptor.creationType": "Creation Type: %{type}",
    "descriptor.derivationPath": "Derivation Path",
    "descriptor.fingerprint": "Fingerprint",
    "descriptor.publicKey": "Public Key",
    "descriptor.scriptFunction": "Script Function",
    "descriptor.scriptVersion": "Script Version: %{version}",
    "descriptor.title": "Descriptor",
    "descriptors.noAvailable": "No descriptors available",
    "duplicate.title": "Duplicate Account",
    "enter.pin": "Enter pin",
    "entropy.coin.desc.12": "To achieve 128 bits of entropy, you need to flip a fair coin about 128 times, as each flip provides 1 bit of randomness.",
    "entropy.coin.desc.15": "To achieve 160 bits of entropy, you need to flip a fair coin about 160 times, as each flip provides 1 bit of randomness.",
    "entropy.coin.desc.18": "To achieve 192 bits of entropy, you need to flip a fair coin about 192 times, as each flip provides 1 bit of randomness.",
    "entropy.coin.desc.21": "To achieve 224 bits of entropy, you need to flip a fair coin about 224 times, as each flip provides 1 bit of randomness.",
    "entropy.coin.desc.24": "To achieve 256 bits of entropy, you need to flip a fair coin about 256 times, as each flip provides 1 bit of randomness.",
    "entropy.coin.label": "Coin Flip",
    "entropy.coin.title": "Generate Entropy by Coin Flip",
    "entropy.dice.desc.12": "To achieve 128 bits of entropy, you need to roll a six-sided die approximately 50 times, as each roll provides about 2.585 bits of randomness.",
    "entropy.dice.desc.15": "To achieve 160 bits of entropy, you need to roll a six-sided die approximately 62 times, as each roll provides about 2.585 bits of randomness.",
    "entropy.dice.desc.18": "To achieve 192 bits of entropy, you need to roll a six-sided die approximately 74 times, as each roll provides about 2.585 bits of randomness.",
    "entropy.dice.desc.21": "To achieve 224 bits of entropy, you need to roll a six-sided die approximately 87 times, as each roll provides about 2.585 bits of randomness.",
    "entropy.dice.desc.24": "To achieve 256 bits of entropy, you need to roll a six-sided die approximately 99 times, as each roll provides about 2.585 bits of randomness.",
    "entropy.dice.label": "Dice",
    "entropy.dice.title": "Generate Entropy by Dice",
    "entropy.drawing.label": "Drawing",
    "entropy.none.label": "None",
    "entropy.title": "Extra Entropy",
    "export.config": "Export config",
    "export.descriptors": "Descriptors",
    "export.descriptorsPDF": "Export as PDF",
    "export.file.name.descriptors": "descriptors",
    "export.file.save": "Save file",
    "export.labels": "Export labels",
    "export.noLabels.description": "Once you add labels to your transactions, utxos, and addresses, you will be able to export them.",
    "export.noLabels.title": "No labels",
    "export.pubkeys": "Public Keys",
    "export.vpubFormat": "VPUB Format",
    "export.xpubFormat": "XPUB Format",
    "fingerprint": "Fingerprint",
    "generate.disclaimer.1": "Anyone with this information can move the sats to another account.",
    "generate.disclaimer.2": "Consider an air-gapped hardware device for generating keys for significant amounts.",
    "generate.disclaimer.3": "Losing this information will lose the funds.",
    "generate.multi.title": "Generate Keys",
    "generate.newSecretSeed": "Generate new secret seed",
    "generate.title": "Generate seed",
    "generate.warning": "Keep this information secret and backed up.",
    "gotoWallet": "Go to Wallet",
    "import": {
      "error": {
        "checksumFormat": "Invalid checksum format",
        "checksumInvalid": "Invalid checksum",
        "derivationPathBracket": "Unclosed derivation path bracket",
        "derivationPathComponent": "Invalid derivation path component",
        "descriptorFormat": "Invalid descriptor format",
        "descriptorIncompatible": "Descriptor is incompatible with multisig script version",
        "fingerprintFormat": "Invalid fingerprint format",
        "missingDerivationPath": "Missing derivation path",
        "missingParenthesis": "Missing closing parenthesis",
        "networkIncompatible": "Descriptor is not compatible with the selected network",
        "scriptFunctionInvalid": "Unknown or invalid script function",
        "scriptVersionMismatch": "Script type \"%{scriptType}\" is not compatible with multisig script version \"%{scriptVersion}\". Expected: %{expectedTypes}",
        "unexpectedBracket": "Unexpected closing bracket in derivation path",
        "xpubIncompatible": "Extended public key is incompatible with multisig script version"
      },
      "success": "Key imported successfully"
    },
    "import.descriptor": "Import Descriptor",
    "import.error": "Failed to import key",
    "import.error.checksumFormat": "Invalid checksum format",
    "import.error.checksumInvalid": "Invalid checksum",
    "import.error.derivationPathBracket": "Unclosed derivation path bracket",
    "import.error.derivationPathComponent": "Invalid derivation path component",
    "import.error.descriptorFormat": "Invalid descriptor format",
    "import.error.descriptorIncompatible": "Descriptor is incompatible with multisig script version",
    "import.error.fingerprintFormat": "Invalid fingerprint format",
    "import.error.missingDerivationPath": "Missing derivation path",
    "import.error.missingParenthesis": "Missing closing parenthesis",
    "import.error.networkIncompatible": "Descriptor is not compatible with the selected network",
    "import.error.scriptFunctionInvalid": "Unknown or invalid script function",
    "import.error.scriptVersionMismatch": "Script type \"%{scriptType}\" is not compatible with multisig script version \"%{scriptVersion}\". Expected: %{expectedTypes}",
    "import.error.unexpectedBracket": "Unexpected closing bracket in derivation path",
    "import.error.xpubIncompatible": "Extended public key is incompatible with multisig script version",
    "import.existingSingleWallet": "Exisiting Single Key Wallets",
    "import.extendedPub": "Import Extended Public Key",
    "import.fromOtherWallet": "Select From Other Wallets",
    "import.labels": "Import labels",
    "import.multi.title": "Import Keys",
    "import.success": "Key imported successfully",
    "import.title": "Import existing seed",
    "import.title2": "Import Seed",
    "import.tpub": "Import TPub",
    "import.upub": "Import UPub",
    "import.vpub": "Import VPub",
    "import.watchOnly.title": "Import watch-only",
    "import.wif.title": "Import WIF (single key)",
    "import.word.noMatch": "No matching words",
    "import.xpub": "Import XPub",
    "import.ypub": "Import YPub",
    "import.zpub": "Import ZPub",
    "key.number": "Key number",
    "load.sample.bitcoin.address.salvador": "Watch-only Address (EI Salvador)",
    "load.sample.bitcoin.address.segwit": "Watch-only Segwit Xpub",
    "load.sample.bitcoin.address.tether": "Multi-address watch-only (Tether)",
    "load.sample.signet.address": "Watch-only address",
    "load.sample.signet.legacy": "Legacy Signlesig",
    "load.sample.signet.multisig": "SegWit Multisig",
    "load.sample.signet.segwit": "SegWit Singlesig",
    "load.sample.signet.xpub": "Watch-only Xpub",
    "load.sample.testnet.address": "Watch-only Address",
    "mnemonic.12": "12 words generated from 128 bits of entropy. For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.15": "15 words generated from 160 bits of entropy. For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.18": "18 words generated from 192 bits of entropy. For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.21": "21 words generated from 224 bits of entropy. For potentially increased computational security, consider using 24 words for new accounts.",
    "mnemonic.24": "24 words generated from 256 bits of entropy.",
    "mnemonic.title": "BIP39 Mnemonic Seed Words",
    "mnemonic.wordList": "Mnemonic Word List Language",
    "mnemonic.wordListDescription": "Using the %{wordList} word list for the mnemonic seed.",
    "mnemonic.wordListText": "%{wordList} Word List",
    "multisig.create": "Creating Multisig Wallet",
    "multisig.created": "Multisig Wallet Created",
    "multisig.creating": "Creating MultiSig Wallet",
    "multisig.gotoWallet": "Go to Wallet",
    "multisig.viewAllWallets": "View All Wallets",
    "name": "Name",
    "network.description": "Network: %{network}",
    "network.title": "Network",
    "nostrSync": {
      "autoSyncMustBeEnabled": "Auto-sync must be enabled to send transaction data",
      "devicesGroupChat": {
        "displayError": "Error displaying message",
        "invalidPsbt": "Invalid PSBT",
        "loadingMessages": "Loading messages...",
        "messagePlaceholder": "Type your message...",
        "noMessages": "No messages yet",
        "sendButton": "Send",
        "syncOff": " (Sync Off)",
        "syncOn": " (Sync On)",
        "title": "Devices Group Chat",
        "unknownSender": "Unknown sender",
        "youSuffix": " (You)"
      },
      "failedToSendTransactionData": "Failed to send transaction data",
      "messageReceivedReadySign": "Transaction received! Ready to sign.",
      "shareInChat": "Share in Chat",
      "shareTransactionTitle": "Share Transaction",
      "transactionDataNotAvailable": "Transaction data not available",
      "transactionDataSentToGroupChat": "Transaction data sent to group chat"
    },
    "nostrSync.autoSync": "Auto Sync",
    "nostrSync.commonNostrKeys": "Shared Descriptior Keys",
    "nostrSync.deriveNsec": "Derive nsec",
    "nostrSync.deviceKeys": "Personal Device Keys",
    "nostrSync.errorLabelFetching": "Failed to fetch labels",
    "nostrSync.errorLabelSend": "Error sending labels backup to relays",
    "nostrSync.errorMnemonic": "Invalid mnemonic",
    "nostrSync.errorNsec": "Invalid mnemonic",
    "nostrSync.generateCommonKeys": "Generate Common Keys",
    "nostrSync.importLabels": "Import Labels",
    "nostrSync.latestMessages": "Latest Messages",
    "nostrSync.loadOlderMessages": "Load Older Messages",
    "nostrSync.loading": "Loading messages...",
    "nostrSync.loadingKeys": "Loading keys...",
    "nostrSync.manageRelays": "Manage relays (%{count})",
    "nostrSync.members": "Found Members",
    "nostrSync.mnemonicPassphrase": "Mnemonic Passphrase (optional)",
    "nostrSync.noLabels": "No labels to send",
    "nostrSync.noMembers": "No members found",
    "nostrSync.noRelaysWarning": "Please select at least one relay to sync labels",
    "nostrSync.npub": "npub",
    "nostrSync.nsec": "nsec",
    "nostrSync.relayStatus": "Relay Status",
    "nostrSync.relayStatusConnected": "Connected",
    "nostrSync.relayStatusConnecting": "Connecting...",
    "nostrSync.relayStatusDisconnected": "Disconnected",
    "nostrSync.relays.addCustomRelay": "Add relay",
    "nostrSync.relays.custom": "Custom relays",
    "nostrSync.relays.inputPlaceholder": "your-relay.com",
    "nostrSync.relays.public": "Public relays",
    "nostrSync.save": "Save",
    "nostrSync.selectRelays": "Select Relays",
    "nostrSync.setKeys": "Manage NOSTR keys",
    "nostrSync.success": "Labels sent to relays",
    "nostrSync.sync": "Nostr Sync",
    "nostrSync.syncNow": "Sync now",
    "nostrSync.tabs.auto": "Automatic",
    "nostrSync.tabs.manual": "Manual",
    "nostrSync.title": "Nostr Sync",
    "parentAccountActivity": "Parent Account Activity",
    "participant.keyName": "Key Name",
    "participant.participant.keyName": "Key Name",
    "policy.multiSignature.description": "Multiple signers required",
    "policy.multiSignature.title": "Multi-Signature",
    "policy.singleSignature.description": "Single key wallet for basic signing",
    "policy.singleSignature.title": "Single Signature",
    "policy.title": "Policy Type",
    "policy.watchOnly.description": "Watch addresses or xpubs for external signing",
    "policy.watchOnly.title": "Watch Only",
    "receive": "Receive",
    "replace.key": "Replace key",
    "script": "Script",
    "seed.dropAndKeep.tpub": "Drop Seed & Keep TPub",
    "seed.dropAndKeep.upub": "Drop Seed & Keep TPub/UPub",
    "seed.dropAndKeep.vpub": "Drop Seed & Keep TPub/VPub",
    "seed.dropAndKeep.xpub": "Drop Seed & Keep XPub",
    "seed.dropAndKeep.ypub": "Drop Seed & Keep XPub/YPub",
    "seed.dropAndKeep.zpub": "Drop Seed & Keep XPub/ZPub",
    "seed.dropSeedConfirm.confirm": "Drop Seed",
    "seed.dropSeedConfirm.message": "This will permanently remove the seed (mnemonic) from this key. You will only be able to use the extended public key for signing. This action cannot be undone.",
    "seed.dropSeedConfirm.title": "Drop Seed",
    "seed.dropSeedError": "Failed to drop seed",
    "seed.dropSeedSuccess": "Seed dropped successfully",
    "seed.droppedSeed": "Dropped Seed (%{name})",
    "seed.enterPinToView": "Enter PIN to view seed words",
    "seed.external": "External Descriptor",
    "seed.formatButtons.tpub": "TPUB",
    "seed.formatButtons.upub": "UPUB",
    "seed.formatButtons.vpub": "VPUB",
    "seed.formatButtons.xpub": "XPUB",
    "seed.formatButtons.ypub": "YPUB",
    "seed.formatButtons.zpub": "ZPUB",
    "seed.importedSeed": "Imported Seed (%{name})",
    "seed.keepInSecret": "Keep your mnemonic words in secret !",
    "seed.keepItSecret": "Keep it secret",
    "seed.newSeed": "New Seed (%{name})",
    "seed.noLabel": "No Label",
    "seed.noSeedAvailable": "No seed available for this key",
    "seed.publicKey": "Public Key",
    "seed.qr.description": "This QR code has your mnemonic seed encoded.",
    "seed.qr.title": "Mnemonic Seed QR Code",
    "seed.seedqr.standardDescription": "Standard QR code for seed words",
    "seed.seedqr.title": "Seed QR",
    "seed.shareDescriptor": "Share Descriptor",
    "seed.shareTpub": "Share TPub",
    "seed.shareUpub": "Share TPub/UPub",
    "seed.shareVpub": "Share TPub/VPub",
    "seed.shareXpub": "Share XPub",
    "seed.shareYpub": "Share XPub/YPub",
    "seed.shareZpub": "Share XPub/ZPub",
    "seed.showQR": "Show QR Code",
    "seed.unableToDecrypt": "Unable to decrypt seed",
    "seed.viewSeedWords": "View Seed Words",
    "selectKeySource": "Select Key Source",
    "send": "Send",
    "settings.title": "Account Settings and Tools",
    "signatureRequired": "Signatures Required",
    "sync.status.error": "Can't sync",
    "sync.status.old.day": "~%{value}d ago",
    "sync.status.old.hour": "~%{value}h ago",
    "sync.status.old.month": "~%{value}m ago",
    "sync.status.old.year": "~%{value}y ago",
    "sync.status.synced": "Synced",
    "sync.status.syncing": "Syncing",
    "sync.status.timeout": "Can't sync\nTimeout",
    "sync.status.unsynced": "Unsynced",
    "syncFailed": "Failed to sync wallet. Make sure you have internet connection.",
    "syncProgress": "Syncing... %{tasksDone}/%{totalTasks} completed",
    "transaction": {
      "dataInvalid": "This message does not contain transaction data",
      "dataNotFound": "Transaction data not found",
      "dataParseFailed": "Failed to parse transaction data",
      "finalizedSuccessfully": "Multisig transaction finalized successfully!",
      "openSignFlowFailed": "Failed to open sign flow",
      "openingInAccount": "Opening transaction in {{accountName}}",
      "received": "Transaction received! Click \"Go to Sign Flow\" to continue.",
      "signFlow": "Go to Sign Flow",
      "signRequest": "Transaction Sign Request"
    },
    "utxos": "UTXOs",
    "viewMnemonic": "View mnemonic"
  },
  "accounts": {
    "address": "Address",
    "change": "Change",
    "derivedAddresses": "Derived\nAddresses",
    "empty": "No keys yet",
    "index": "Index",
    "label": "Label",
    "receive": "Receive",
    "samples": "Sample accounts",
    "satsInMempool": "Sats in\nMempool",
    "spendableOutputs": "Spendable\nOutputs",
    "totalTransactions": "Total\nTransactions",
    "txs": "Txs",
    "unspentSats": "Sats",
    "utxos": "UTXOs",
    "watchedAddresses": "Watched\nAddresses"
  },
  "address": {
    "details.balance.confirmed": "Confirmed",
    "details.balance.title": "Balance",
    "details.balance.unconfirmed": "Unconfirmed",
    "details.derivation.fingerprint": "Master fingerprint",
    "details.derivation.index": "Index",
    "details.derivation.keychain": "Keychain",
    "details.derivation.path": "Path",
    "details.derivation.title": "Derivation",
    "details.encoding.network": "Network",
    "details.encoding.script": "Script (ASM)",
    "details.encoding.scriptVersion": "Script version",
    "details.encoding.title": "Encoding",
    "details.history.title": "History",
    "details.history.tx": "Total transactions",
    "details.history.utxo": "Total UTXOs",
    "details.key.private": "Private key",
    "details.key.public": "Public key",
    "details.key.title": "Key information",
    "details.title": "Address details",
    "label.title": "Address label",
    "list.loadMore": "Load more",
    "list.table.balance": "Sats",
    "list.table.index": "index",
    "list.table.loadMore": "Load more",
    "list.table.tx": "TXs",
    "list.table.utxo": "UTXOs",
    "transactions": "Address transactions",
    "utxos": "Address UTXOs"
  },
  "app": {
    "name": "SatSigner",
    "notImplemented": "Not yet implemented"
  },
  "auth": {
    "confirmDuressPin": "Confirm duress pin number",
    "confirmPin": "Confirm pin number",
    "pinMatchDuressPin": "PIN and Duress PIN must be different!",
    "pinsDontMatch": "No pin number match",
    "pinsMatch": "Pin number match",
    "reenterDuressPinTitle": "Re-enter your duress\npin number",
    "reenterPinTitle": "Re-enter your\npin number",
    "setDuressPin": "Set duress pin number",
    "setDuressPinLater": "Set duress pin later",
    "setDuressPinTitle": "Set duress pin number\nwhich erases all accounts",
    "setPin": "Set pin number",
    "setPinLater": "Set pin later",
    "setPinTitle": "Set pin number to\nenter the app",
    "triesLeft": "Tries left",
    "tryLeft": "Try left",
    "unlock": "Unlock Satsigner",
    "warningKeysErase": "Too many wrong attempts\n will erase all keys"
  },
  "bitcoin": {
    "address": "Address",
    "block": "Block",
    "blockHeight": "Block Height",
    "blocks": "Blocks",
    "checksum": "Checksum",
    "confirmations.manyBlocks": "%{blocks} confirmations",
    "confirmations.oneBlock": "1 confirmation",
    "confirmations.unconfirmed": "Unconfirmed",
    "cpfp": "Child Pays For Parents",
    "fingerprint": "Fingerprint",
    "network.bitcoin": "Bitcoin",
    "network.mainnet": "Mainnet",
    "network.signet": "Signet",
    "network.testnet": "Testnet",
    "notYourCoins": "Not your coins",
    "notYourKeys": "Not your keys",
    "passphrase": "Passphrase",
    "rbf": "Replace By Fee",
    "sat": "sat",
    "satVb": "sat/vB",
    "sats": "sats",
    "satsVb": "sats/vB",
    "transaction": "transaction",
    "transactions": "transactions",
    "utxo": "UTXO",
    "utxos": "UTXOs",
    "word": "Word",
    "words": "Words"
  },
  "camera": {
    "button": {
      "resetScan": "Reset Scan"
    },
    "enableCameraAccess": "Enable Camera Access",
    "error": {
      "assembleFailed": "Failed to assemble multi-part QR code",
      "bbqrDecodeFailed": "Failed to decode BBQR QR code",
      "invalidContent": "Invalid content detected",
      "processFailed": "Failed to process scanned data",
      "scanFailed": "Failed to scan QR code",
      "urDecodeFailed": "Failed to decode UR QR code"
    },
    "invalidContent": "Invalid {context} content detected",
    "permissions": "Enable camera access in your phone's settings to scan a QR code.",
    "scanQRCode": "Scan QRCode",
    "scanText": "Scan any Bitcoin or Lightning related QR code.",
    "scanningContent": "Scanning {context} content..."
  },
  "common": {
    "QR": "QR",
    "acknowledge": "Acknowledge",
    "add": "Add",
    "addTag": "Add tag",
    "amount": "Amount",
    "areYouSure": "Are you sure?",
    "back": "Back",
    "backToAccountHome": "Back to account home",
    "cancel": "Cancel",
    "clear": "Clear",
    "clipboardEmpty": "Clipboard is empty or doesn't contain a valid Bitcoin address, payment request, or PSBT",
    "clipboardHasContent": "Clipboard contains a Bitcoin address, payment request, or PSBT",
    "close": "Close",
    "completed": "Completed",
    "confirm": "Confirm",
    "connected": "Connected",
    "continue": "Continue",
    "copiedToClipboard": "Copied to clipboard",
    "copy": "Copy",
    "copyToClipboard": "Copy to clipboard",
    "create": "Create",
    "createTag": "Create tag %{tag}",
    "custom": "Custom",
    "date": "Date",
    "description": "Description",
    "descriptor": "Descriptor",
    "deselectAll": "Deselect All",
    "dismiss": "Dismiss",
    "download": "Download",
    "downloadFile": "Download file",
    "emitNFC": "Emit NFC",
    "error": {
      "assembleQRCode": "Failed to assemble multi-part QR code",
      "autoSyncMustBeEnabled": "Auto-sync must be enabled to send messages",
      "checkingInputSignatures": "Error checking if input has enough signatures",
      "combinePSBTs": "Failed to combine and finalize PSBTs",
      "dataTooLarge": "Data too large for single QR code",
      "decodeBBQRCode": "Failed to decode BBQR QR code",
      "decodeURCode": "Failed to decode UR QR code",
      "extractPSBTData": "Failed to extract transaction data from PSBT",
      "extractTransaction": "Failed to extract final transaction",
      "failedToGenerateTransactionHex": "Failed to generate transaction hex",
      "failedToSendMessage": "Failed to send message",
      "finalizeInput": "Failed to finalize input",
      "finalizeTransaction": "Failed to finalize transaction - insufficient signatures",
      "messageCannotBeEmpty": "Message cannot be empty",
      "missingRequiredNostrConfig": "Missing required Nostr configuration",
      "noClipboardData": "No data found in clipboard",
      "noOriginalPSBT": "No original PSBT found for combination",
      "noSignedPSBTs": "No signed PSBTs found for combination",
      "openSignFlowFailed": "Failed to open sign flow",
      "pasteFromClipboard": "Failed to paste from clipboard",
      "processPSBT": "Failed to process PSBT",
      "processScannedData": "Failed to process scanned data",
      "processSignedPSBT": "Failed to process signed PSBT",
      "scanQRCode": "Failed to scan QR code",
      "transactionDataInvalid": "This message does not contain transaction data",
      "transactionDataNotFound": "Transaction data not found",
      "transactionDataParseFailed": "Failed to parse transaction data",
      "validMnemonic": "Please enter a valid mnemonic",
      "validatingCosignerSignature": "Failed in validating cosigner signature"
    },
    "extendedPublicKey": "Extended Public Key",
    "fingerprint": "Fingerprint",
    "from": "From",
    "goBack": "Go back",
    "hide": "Hide",
    "importFromClipboard": "Import from clipboard",
    "invalid": "Invalid",
    "key": "Key",
    "label": "Label",
    "less": "Less",
    "loading": "Loading",
    "loadingX": "Loading %{x}...",
    "max": "Max",
    "more": "More",
    "name": "Name",
    "next": "Next",
    "no": "No",
    "noLabel": "No label",
    "of": "Of",
    "off": "Off",
    "on": "On",
    "optional": "Optional",
    "parts": "Parts",
    "paste": "Paste",
    "pasteFromClipboard": "Paste from clipboard",
    "progress": "Progress",
    "publicKeys": "PUBLIC KEYS",
    "remaining": "Remaining",
    "remove": "Remove",
    "save": "Save",
    "scan": "Scan",
    "scanQR": "Scan QR",
    "select": "Select",
    "selectAll": "Select All",
    "selected": "Selected",
    "showQR": "Show QR",
    "skip": "Skip",
    "speed": "Speed",
    "success": {
      "dataPasted": "Data pasted successfully",
      "psbtImported": "PSBT imported successfully",
      "qrScanned": "QR code scanned successfully",
      "signedPsbtImported": "Signed PSBT imported successfully"
    },
    "tags": "Tags",
    "to": "To",
    "total": "Total",
    "usb": "USB",
    "valid": "Valid",
    "version": "Version",
    "warning": "Warning",
    "yes": "Yes"
  },
  "content": {
    "bbqrFragment": "BBQR Fragment",
    "bitcoinAddress": "Bitcoin Address",
    "bitcoinUri": "Bitcoin Payment Request",
    "detected": "Detected: {type}",
    "ecashToken": "Ecash Token",
    "lightningInvoice": "Lightning Network Invoice",
    "lnurl": "LNURL Payment Request",
    "processing": "Processing content...",
    "psbt": "Partially Signed Bitcoin Transaction",
    "seedQr": "Seed Phrase QR Code",
    "unknown": "Unknown Content",
    "ur": "Universal Resource"
  },
  "converter": {
    "currency.bitcoin": "Bitcoin",
    "currency.cad": "CAD",
    "currency.chf": "CHF",
    "currency.eur": "EUR",
    "currency.gbp": "GBP",
    "currency.jpy": "JPY",
    "currency.sats": "sats",
    "currency.usd": "USD",
    "energy.adjustmentProgress": "Difficulty Adjustment Progress",
    "energy.adjustmentProgressPercentage": "%{percentage} of %{blocks}",
    "energy.bestHash": "Best Block Hash",
    "energy.blockCandidate": "Blcok candidate",
    "energy.blockHeaderCandidate": "Block Header Candidate",
    "energy.blockMinedMinutesAgo": "mins ago",
    "energy.blockSize": "Size",
    "energy.blocksFound": "%{blocks} Blocks found",
    "energy.energyRate": "mAh/min",
    "energy.hashRate": "hash/s",
    "energy.hashesPerSecond": "hash/s",
    "energy.joinPool": "Join Pool",
    "energy.latestHash": "Latest Hash",
    "energy.mining": "Mining",
    "energy.miningIntensity": "Mining Intensity",
    "energy.miningIntensityRate": "%{intensity} hash/interval",
    "energy.miningInterval": "Mining Interval",
    "energy.miningIntervalRate": "%{interval}ms",
    "energy.networkHashRate": "%{rate} EH/S",
    "energy.node.blocks": "Blocks",
    "energy.node.chain": "Chain",
    "energy.node.difficulty": "Difficulty",
    "energy.node.headers": "Headers",
    "energy.node.progress": "Verification progress",
    "energy.node.refresh": "Refresh info",
    "energy.node.title": "Blockchain Data",
    "energy.notMining": "Not mining",
    "energy.params.address": "Mining Address",
    "energy.params.addressInvalid": "Invalid Bitcoin address. Please enter a valid legacy, P2SH, or SegWit address. ",
    "energy.params.addressPlaceholder": "Enter address to receive rewards",
    "energy.params.opReturn": "OP_RETURN Content",
    "energy.params.opReturnPlaceholder": "Enter optional OP_RETURN",
    "energy.params.rpcPassword": "RPC Password",
    "energy.params.rpcPasswordPlaceholder": "Enter RPC password",
    "energy.params.rpcUrl": "RPC URL",
    "energy.params.rpcUser": "RPC Username",
    "energy.params.rpcUserPlaceholder": "Enter RPC Username",
    "energy.params.test": "Test Connection",
    "energy.params.title": "Bitcoin Node Credentials",
    "energy.reward": "Reward",
    "energy.satsEarned": "Sats Earned",
    "energy.startMining": "Start mining",
    "energy.stopMining": "Stop mining",
    "energy.stoppingMining": "Stopping...",
    "energy.template.addTransaction": "Include arbitrary transaction",
    "energy.template.addTransactionBtn": "Add transaction",
    "energy.template.addTransactionPlaceholder": "Enter mempool TX ID",
    "energy.template.loading": "Loading block template",
    "energy.template.refresh": "Refresh template",
    "energy.template.select": "Template",
    "energy.template.selectA": "Select template A",
    "energy.template.selectB": "Select template B",
    "energy.template.selectC": "Select template C",
    "energy.template.template": "Template",
    "energy.template.title": "Block Template",
    "energy.template.transactions": "Transactions",
    "energy.title": "Energy",
    "energy.totalBitcoin": "Total Bitcoin",
    "title": "Converter",
    "vsize": "Virtual size",
    "weight": "Weight"
  },
  "date": {
    "date": "Date",
    "day": "day",
    "days": "days",
    "hour": "hour",
    "hours": "hours",
    "minute": "minute",
    "minutes": "minutes",
    "month": "month",
    "months": "months",
    "today": "Today",
    "year": "year",
    "years": "years"
  },
  "ecash": {
    "backup.activeMint": "Active Mint",
    "backup.backupData": "Backup Data",
    "backup.backupInstructions": "Copy this data and store it securely. This contains your wallet information and proofs.",
    "backup.connectedMints": "Connected Mints",
    "backup.description": "Backup your ecash wallet data including proofs, mint connections, and balances.",
    "backup.generateBackup": "Generate Backup",
    "backup.title": "Backup",
    "backup.totalBalance": "Total Balance",
    "backup.totalProofs": "Total Proofs",
    "backup.walletInfo": "Wallet Information",
    "backup.warning": "Important Warning",
    "backup.warningText": "Keep this backup data secure and private. Anyone with access to this data can potentially access your ecash funds.",
    "error.backupRestore": "Failed to restore backup",
    "error.connectionError": "Connection Error",
    "error.failedToCheckStatus": "Failed to check token status",
    "error.failedToCopy": "Failed to copy to clipboard",
    "error.failedToPaste": "Failed to paste from clipboard",
    "error.insufficientBalance": "Insufficient balance in LND node",
    "error.insufficientProofs": "Insufficient proofs for this amount",
    "error.invalidAmount": "Invalid amount",
    "error.invalidInvoice": "Invalid Lightning invoice",
    "error.invalidToken": "Invalid ecash token",
    "error.invoiceDecodeFailed": "Failed to decode invoice details. Please verify the amount and description manually before proceeding.",
    "error.invoiceDecodeUnavailable": "Invoice details could not be decoded. Please verify the amount and description manually before proceeding.",
    "error.lightningPaymentFailed": "Lightning payment failed. Please try again.",
    "error.lightningPaymentFailedStatus": "Lightning payment failed",
    "error.lnurlPaymentFailed": "Failed to process LNURL payment",
    "error.meltFailed": "Melt failed",
    "error.mintConnection": "Failed to connect to mint",
    "error.networkError": "Network error occurred",
    "error.nfcEmissionFailed": "Failed to emit token via NFC",
    "error.nfcNotAvailable": "NFC is not available on this device",
    "error.noAmountEntered": "No amount entered",
    "error.noInvoiceProvided": "No invoice provided",
    "error.noMintConnected": "No mint connected",
    "error.noPaymentRoute": "No payment route found - insufficient liquidity",
    "error.noPaymentRouteMessage": "No payment route found. Try a smaller amount or different invoice.",
    "error.noTextInClipboard": "No text found in clipboard",
    "error.noTokenToEmit": "No token available to emit via NFC",
    "error.noTokensAvailable": "No tokens available",
    "error.noTokensToMelt": "No tokens available to melt",
    "error.noTokensToSend": "No tokens available to send",
    "error.notConnectedToLND": "Not connected to LND node. Please check your connection and try again.",
    "error.paymentFailed": "Payment failed or expired",
    "error.paymentRequestExpired": "Payment request expired or already paid",
    "error.paymentRequestExpiredMessage": "Payment request expired or already paid. Please try again.",
    "error.pleaseEnterAmount": "Please enter an amount",
    "error.pleaseEnterValidAmount": "Please enter a valid amount",
    "error.unknownError": "Unknown error occurred",
    "error.unknownMeltError": "Unknown melt error",
    "info.mintDisconnected": "Previous mint disconnected",
    "mint.balance": "Balance",
    "mint.connect": "Connect to Mint",
    "mint.connected": "Connected Mints",
    "mint.defaultMints": "Popular Mints",
    "mint.disconnected": "Disconnected",
    "mint.status": "Status",
    "mint.title": "Manage Mints",
    "mint.url": "Mint URL",
    "quote.cancelled": "Cancelled",
    "quote.check": "Check Status",
    "quote.completed": "Completed",
    "quote.expired": "Expired",
    "quote.failed": "Failed",
    "quote.paid": "Paid",
    "quote.pending": "Pending",
    "quote.settled": "Settled",
    "quote.status": "Quote Status",
    "receive.amount": "Amount",
    "receive.checkPayment": "Check Payment",
    "receive.createInvoice": "Create Invoice",
    "receive.ecashTab": "Ecash",
    "receive.lightningTab": "Lightning",
    "receive.memo": "Memo",
    "receive.memoPlaceholder": "Enter memo (optional)",
    "receive.polling": "Checking payment status...",
    "receive.redeemToken": "Redeem Token",
    "receive.startPolling": "Start Polling",
    "receive.status": "Status",
    "receive.stopPolling": "Stop Polling",
    "receive.title": "Receive",
    "receive.token": "Ecash Token",
    "recovery.backupData": "Backup Data",
    "recovery.backupInstructions": "Paste your backup data below to restore your ecash wallet.",
    "recovery.backupPlaceholder": "{\n  \"version\": \"1.0\",\n  \"mints\": [\n    {\n      \"url\": \"https://mint.minibits.cash/Bitcoin\",\n      \"name\": \"Minibits mint\",\n      \"balance\": 11,\n      \"isConnected\": true\n    }\n  ],\n  \"proofs\": [\n    {\n      \"id\": \"00500550f0494146\",\n      \"amount\": 1,\n      \"secret\": \"19efe24ff6c750a757265f17c782984c2cad09427f3caf5f045c7db5c1b32755\",\n      \"C\": \"038777d58fbbaaa10ffeeea397eab7c2f70f52f39eca91ae274d8b889a37ebc447\"\n    }\n  ],\n  \"transactions\": []\n}",
    "recovery.clear": "Clear",
    "recovery.clearAllData": "Clear All Data",
    "recovery.clearAllDataWarning": "This will permanently delete all ecash data including mints, proofs, and transaction history. This action cannot be undone.",
    "recovery.confirmRestore": "Confirm Restore",
    "recovery.dangerDescription": "Permanently delete all ecash data. This action cannot be undone.",
    "recovery.dangerZone": "Danger Zone",
    "recovery.noDataToClear": "No data to clear",
    "recovery.restore": "Restore",
    "recovery.title": "Recovery",
    "recovery.validateAndRestore": "Validate & Restore",
    "scan.lightningInvoiceScanned": "Lightning invoice scanned",
    "scan.lnurlScanned": "LNURL scanned",
    "scan.qrCodeScanned": "QR code scanned successfully",
    "scan.tokenScanned": "Ecash token scanned",
    "send.amount": "Amount",
    "send.ecashTab": "Ecash",
    "send.generateToken": "Generate Token",
    "send.generatedToken": "Generated Token",
    "send.lightningInvoice": "Lightning Invoice",
    "send.lightningTab": "Lightning",
    "send.meltTokens": "Melt Tokens",
    "send.memo": "Memo",
    "send.memoPlaceholder": "Enter memo (optional)",
    "send.qrCode": "QR Code",
    "send.title": "Send",
    "settings.dataManagement": "Data Management",
    "settings.mintManagement": "Mint Management",
    "settings.title": "Ecash Settings",
    "status.creatingMeltQuote": "Creating melt quote...",
    "status.lnurlInvoiceReceived": "LNURL invoice received, waiting...",
    "status.meltQuoteCreated": "Melt quote created, melting tokens...",
    "status.requestingLnurlInvoice": "Requesting LNURL invoice...",
    "status.startingMeltProcess": "Starting melt process...",
    "status.tokensMeltedSuccessfully": "Tokens melted successfully!",
    "status.usingBolt11Invoice": "Using bolt11 invoice...",
    "success.backupRestored": "Backup restored successfully",
    "success.dataCleared": "All data cleared successfully",
    "success.invoiceCreated": "Invoice created successfully",
    "success.invoicePasted": "Invoice pasted from clipboard",
    "success.invoiceScanned": "Invoice scanned successfully",
    "success.mintConnected": "Connected to mint successfully",
    "success.paymentReceived": "Payment received successfully",
    "success.tokenEmitted": "Token emitted via NFC successfully",
    "success.tokenGenerated": "Ecash token generated successfully",
    "success.tokenPasted": "Token pasted from clipboard",
    "success.tokenRedeemed": "Ecash token redeemed successfully",
    "success.tokenScanned": "Token scanned successfully",
    "success.tokensMelted": "Tokens melted successfully",
    "success.tokensMinted": "Tokens minted successfully",
    "tokenDetails.amount": "Amount",
    "tokenDetails.andMore": "and %{count} more",
    "tokenDetails.memo": "Memo",
    "tokenDetails.mint": "Mint",
    "tokenDetails.proof": "Proof",
    "tokenDetails.proofDetails": "Proof Details",
    "tokenDetails.proofs": "Proofs",
    "tokenDetails.proofsCount": "proofs",
    "tokenDetails.title": "Token Details",
    "transaction.melt": "Melt",
    "transaction.mint": "Mint",
    "transaction.receive": "Receive",
    "transaction.send": "Send",
    "transactionDetail.checkStatus": "Check Status",
    "transactionDetail.copyInvoice": "Copy Invoice",
    "transactionDetail.details": "Transaction Details",
    "transactionDetail.expiry": "Expiry",
    "transactionDetail.id": "Transaction ID",
    "transactionDetail.invoice": "Lightning Invoice",
    "transactionDetail.label": "Label",
    "transactionDetail.lightningInvoice": "Lightning Invoice",
    "transactionDetail.memo": "Memo",
    "transactionDetail.mint": "Mint",
    "transactionDetail.notFound": "Transaction not found",
    "transactionDetail.quoteId": "Quote ID",
    "transactionDetail.redeemToken": "Redeem Token",
    "transactionDetail.showQR": "Show QR Code",
    "transactionDetail.title": "Transaction Details",
    "transactionDetail.token": "Ecash Token",
    "transactionHistory.empty": "No transactions yet",
    "transactionHistory.title": "Transaction History",
    "warning.tokenTruncated": "Token was truncated due to NFC size limits"
  },
  "error": {
    "invalid.backend": "Invalid Backend",
    "invalid.port": "Invalid port number",
    "invalid.url": "Invalid URL",
    "notFound.wallet": "Wallet not found",
    "require.host": "Host is required",
    "require.name": "Name is required",
    "require.port": "Port is required",
    "require.url": "URL is required"
  },
  "explorer": {
    "block.date": "Date (from header)",
    "block.dateMedian": "Date (from median)",
    "block.difficulty": "Difficulty",
    "block.id": "Block Hash",
    "block.merkleRoot": "Merkle Root",
    "block.nonce": "Nonce",
    "block.prevHash": "Previous block hash",
    "block.size": "Size",
    "block.title": "Block Details",
    "block.txCount": "Total transactions",
    "block.version": "Version",
    "block.weight": "Weight",
    "chain.title": "Chain",
    "chaintip.title": "Chain Tip",
    "difficulty.avgBlock": "Average Block Time (current)",
    "difficulty.blockDetails.chainWork": "Chain Work",
    "difficulty.blockDetails.cycleHeight": "height",
    "difficulty.blockDetails.date": "Date",
    "difficulty.blockDetails.height": "height",
    "difficulty.blockDetails.nonce": "Nonce",
    "difficulty.blockDetails.size": "Size",
    "difficulty.blockDetails.time": "Time",
    "difficulty.blockDetails.title": "Block Details",
    "difficulty.blockDetails.txs": "Tramsactions",
    "difficulty.blockDetails.vsize": "Virtual Size",
    "difficulty.blockDetails.weight": "Weight",
    "difficulty.blockFrom": "From block",
    "difficulty.blockTo": "to block",
    "difficulty.epoch": "Bitcoin Epoch:",
    "difficulty.fetch": "FETCH",
    "difficulty.nextAdjustment": "Next Difficulty Adjustment",
    "difficulty.title": "Difficulty",
    "halving.title": "Halving",
    "mempool.title": "Mempool"
  },
  "export": {
    "descriptor.description": "Export the descriptor for this key",
    "descriptor.title": "Export Descriptor",
    "file.name.descriptors": "Descriptors",
    "file.name.labels": "Labels",
    "file.save": "Save file",
    "publicKey.description": "Export the public key for this key in various formats",
    "publicKey.export": "Export Public Key",
    "publicKey.format": "Format",
    "publicKey.publicKey": "Public Key",
    "publicKey.title": "Export Public Key"
  },
  "files": {
    "csv": "CSV",
    "json": "JSON"
  },
  "import": {
    "from": "Import from %{name}",
    "success": "Imported %{importCount} from a total of %{total} labels matching your wallet"
  },
  "lightning": {
    "amount": "Amount",
    "lnurlDetails.amountRange": "Amount Range",
    "lnurlDetails.commentAllowed": "Comment Allowed",
    "lnurlDetails.error": "Failed to load LNURL details",
    "lnurlDetails.loading": "Loading LNURL details...",
    "lnurlDetails.service": "Service",
    "lnurlDetails.title": "LNURL Details",
    "paymentDetails.amount": "Amount",
    "paymentDetails.created": "Created",
    "paymentDetails.description": "Description",
    "paymentDetails.expires": "Expires",
    "paymentDetails.paymentHash": "Payment Hash",
    "paymentDetails.title": "Payment Details"
  },
  "multisig": {
    "create": "Create Multi-Signature",
    "createError": "Failed to create multi-signature wallet",
    "created": "Multi-Signature Wallet Created!",
    "creating": "Creating Multi-Signature Wallet...",
    "gotoWallet": "Go to Wallet",
    "viewAllWallets": "View All Wallets"
  },
  "navigation": {
    "item.bitcoin": "Bitcoin",
    "item.block": "Block",
    "item.chain": "Chain",
    "item.chaintip": "Chaintip",
    "item.currency": "Currency",
    "item.difficulty": "Difficulty",
    "item.ecash": "ECash",
    "item.energy": "Energy",
    "item.halving": "Halving",
    "item.lightning": "Lightning",
    "item.liquid": "Liquid",
    "item.mempool": "Mempool",
    "item.nostr": "Nostr",
    "item.time": "Time",
    "label.converter": "Converter",
    "label.explorer": "Explorer",
    "label.signer": "Signer"
  },
  "nfc": {
    "button": {
      "startReading": "Start Reading",
      "startWriting": "Start Writing",
      "writing": "Writing NFC"
    },
    "description": {
      "read": "Hold your device near another NFC-enabled device",
      "write": "Hold your device near an NFC tag to write data"
    },
    "error": {
      "noDataToWrite": "No data to write to NFC tag",
      "readFailed": "Failed to read NFC tag",
      "writeFailed": "Failed to write to NFC tag"
    },
    "mode": {
      "read": "Read NFC Tag",
      "write": "Write to NFC Tag"
    },
    "title": {
      "bitcoin": "Bitcoin NFC",
      "default": "NFC",
      "ecash": "Ecash NFC",
      "lightning": "Lightning NFC"
    }
  },
  "opcode": {
    "DATA": "Data which can be hash, pubkey, address, signature, etc.",
    "OP_0NOTEQUAL": "Returns 0 if the input is 0. 1 otherwise.",
    "OP_1ADD": "1 is added to the input.",
    "OP_1NEGATE": "The number -1 is pushed onto the stack.",
    "OP_1SUB": "1 is subtracted from the input.",
    "OP_2DIV": "The input is divided by 2.",
    "OP_2DROP": "Removes the top two stack items.",
    "OP_2DUP": "Duplicates the top two stack items.",
    "OP_2MUL": "The input is multiplied by 2.",
    "OP_2OVER": "Copies the pair of items two spaces back in the stack to the front.",
    "OP_2ROT": "The fifth and sixth items back are moved to the top of the stack.",
    "OP_2SWAP": "Swaps the top two pairs of items.",
    "OP_3DUP": "Duplicates the top three stack items.",
    "OP_ABS": "The input is made positive.",
    "OP_ADD": "a is added to b.",
    "OP_AND": "Boolean and between each bit in the inputs.",
    "OP_BOOLAND": "If both a and b are not 0, the output is 1. Otherwise 0.",
    "OP_BOOLOR": "If a or b is not 0, the output is 1. Otherwise 0.",
    "OP_CAT": "Concatenates two strings.",
    "OP_CHECKLOCKTIMEVERIFY": "Marks transaction as invalid if the top stack item is greater than the transaction's nLockTime field, otherwise script evaluation continues as though an OP_NOP was executed. Transaction is also invalid if 1. the stack is empty; or 2. the top stack item is negative; or 3. the top stack item is greater than or equal to 500000000 while the transaction's nLockTime field is less than 500000000, or vice versa; or 4. the input's nSequence field is equal to 0xffffffff. The precise semantics are described in BIP 0065.",
    "OP_CHECKMULTISIG": "Compares the first signature against each public key until it finds an ECDSA match. Starting with the subsequent public key, it compares the second signature against each remaining public key until it finds an ECDSA match. The process is repeated until all signatures have been checked or not enough public keys remain to produce a successful result. All signatures need to match a public key. Because public keys are not checked again if they fail any signature comparison, signatures must be placed in the scriptSig using the same order as their corresponding public keys were placed in the scriptPubKey or redeemScript. If all signatures are valid, 1 is returned, 0 otherwise. Due to a bug, one extra unused value is removed from the stack.",
    "OP_CHECKMULTISIGVERIFY": "Same as OP_CHECKMULTISIG, but OP_VERIFY is executed afterward.",
    "OP_CHECKSEQUENCEVERIFY": "Marks transaction as invalid if the relative lock time of the input (enforced by BIP 0068 with nSequence) is not equal to or longer than the value of the top stack item. The precise semantics are described in BIP 0112.",
    "OP_CHECKSIG": "The entire transaction's outputs, inputs, and script (from the most recently-executed OP_CODESEPARATOR to the end) are hashed. The signature used by OP_CHECKSIG must be a valid signature for this hash and public key. If it is, 1 is returned, 0 otherwise.",
    "OP_CHECKSIGADD": "Opcode added by BIP342 (Tapscript)",
    "OP_CHECKSIGVERIFY": "Same as OP_CHECKSIG, but OP_VERIFY is executed afterward.",
    "OP_CODESEPARATOR": "All of the signature checking words will only match signatures to the data after the most recently-executed OP_CODESEPARATOR.",
    "OP_DEPTH": "Puts the number of stack items onto the stack.",
    "OP_DIV": "a is divided by b.",
    "OP_DROP": "Removes the top stack item.",
    "OP_DUP": "Duplicates the top stack item.",
    "OP_ELSE": "If the preceding OP_IF or OP_NOTIF or OP_ELSE was not executed then these statements are and if the preceding OP_IF or OP_NOTIF or OP_ELSE was executed then these statements are not.",
    "OP_ENDIF": "Ends an if/else block. All blocks must end, or the transaction is invalid. An OP_ENDIF without OP_IF earlier is also invalid.",
    "OP_EQUAL": "Returns 1 if the inputs are exactly equal, 0 otherwise.",
    "OP_EQUALVERIFY": "Same as OP_EQUAL, but runs OP_VERIFY afterward.",
    "OP_FALSE": "An empty array of bytes is pushed onto the stack (This is not a no-op: an item is added to the stack).",
    "OP_FROMALTSTACK": "Puts the input onto the top of the main stack. Removes it from the alt stack.",
    "OP_GREATERTHAN": "Returns 1 if a is greater than b, 0 otherwise.",
    "OP_GREATERTHANOREQUAL": "Returns 1 if a is greater than or equal to b, 0 otherwise.",
    "OP_HASH160": "The input is hashed twice: first with SHA-256 and then with RIPEMD-160.",
    "OP_HASH256": "The input is hashed two times with SHA-256.",
    "OP_IF": "If the top stack value is not False, the statements are executed. The top stack value is removed.",
    "OP_IFDUP": "If the top stack value is not 0, duplicate it.",
    "OP_INVALIDOPCODE": "Invalid code",
    "OP_INVERT": "Flips all of the bits in the input.",
    "OP_LEFT": "Keeps only characters left of the specified point in a string.",
    "OP_LESSTHAN": "Returns 1 if a is less than b, 0 otherwise.",
    "OP_LESSTHANOREQUAL": "Returns 1 if a is less than or equal to b, 0 otherwise.",
    "OP_LSHIFT": "Shifts a left b bits, preserving sign.",
    "OP_MAX": "Returns the larger of a and b.",
    "OP_MIN": "Returns the smaller of a and b.",
    "OP_MOD": "Returns the remainder after dividing a by b.",
    "OP_MUL": "a is multiplied by b.",
    "OP_N": "The number in the word name (1-16) is pushed onto the stack.",
    "OP_NEGATE": "The sign of the input is flipped.",
    "OP_NIP": "Removes the second-to-top stack item.",
    "OP_NOP": "Does nothing.",
    "OP_NOP1": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP10": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP2": "OP_CHECKLOCKTIMEVERIFY.",
    "OP_NOP3": "OP_CHECKSEQUENCEVERIFY alias",
    "OP_NOP4": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP5": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP6": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP7": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP8": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOP9": "The word is ignored. Does not mark transaction as invalid.",
    "OP_NOT": "If the input is 0 or 1, it is flipped. Otherwise the output will be 0.",
    "OP_NOTIF": "If the top stack value is False, the statements are executed. The top stack value is removed.",
    "OP_NUMEQUAL": "Returns 1 if the numbers are equal, 0 otherwise.",
    "OP_NUMEQUALVERIFY": "Same as OP_NUMEQUAL, but runs OP_VERIFY afterward.",
    "OP_NUMNOTEQUAL": "Returns 1 if the numbers are not equal, 0 otherwise.",
    "OP_OR": "Boolean or between each bit in the inputs.",
    "OP_OVER": "Copies the second-to-top stack item to the top.",
    "OP_PICK": "The item n back in the stack is copied to the top.",
    "OP_PUSH": "The next opcode bytes is data to be pushed onto the stack",
    "OP_PUSHDATA1": "The next byte contains the number of bytes to be pushed onto the stack.",
    "OP_PUSHDATA2": "The next two bytes contain the number of bytes to be pushed onto the stack in little endian order.",
    "OP_PUSHDATA4": "The next four bytes contain the number of bytes to be pushed onto the stack in little endian order.",
    "OP_RESERVED": "Transaction is invalid unless occuring in an unexecuted OP_IF branch",
    "OP_RESERVED1": "Transaction is invalid unless occuring in an unexecuted OP_IF branch.",
    "OP_RESERVED2": "Transaction is invalid unless occuring in an unexecuted OP_IF branch.",
    "OP_RETURN": "Marks transaction as invalid. Since bitcoin 0.9, a standard way of attaching extra data to transactions is to add a zero-value output with a scriptPubKey consisting of OP_RETURN followed by data. Such outputs are provably unspendable and specially discarded from storage in the UTXO set, reducing their cost to the network. Since 0.12, standard relay rules allow a single output with OP_RETURN, that contains any sequence of push statements (or OP_RESERVED[1]) after the OP_RETURN provided the total scriptPubKey length is at most 83 bytes.",
    "OP_RIGHT": "Keeps only characters right of the specified point in a string.",
    "OP_RIPEMD160": "The input is hashed using RIPEMD-160.",
    "OP_ROLL": "The item <em>n</em> back in the stack is moved to the top.",
    "OP_ROT": "The 3rd item down the stack is moved to the top.",
    "OP_RSHIFT": "Shifts a right b bits, preserving sign.",
    "OP_SHA1": "The input is hashed using SHA-1.",
    "OP_SHA256": "The input is hashed using SHA-256.",
    "OP_SIZE": "Pushes the string length of the top element of the stack (without popping it).",
    "OP_SUB": "b is subtracted from a.",
    "OP_SUBSTR": "Returns a section of a string.",
    "OP_SWAP": "The top two items on the stack are swapped.",
    "OP_TOALTSTACK": "Puts the input onto the top of the alt stack. Removes it from the main stack.",
    "OP_TRUE": "The number 1 is pushed onto the stack.",
    "OP_TUCK": "The item at the top of the stack is copied and inserted before the second-to-top item.",
    "OP_VER": "Transaction is invalid unless occuring in an unexecuted OP_IF branch.",
    "OP_VERIF": "Transaction is invalid even when occuring in an unexecuted OP_IF branch.",
    "OP_VERIFY": "Marks transaction as invalid if top stack value is not true. The top stack value is removed.",
    "OP_VERNOTIF": "Transaction is invalid even when occuring in an unexecuted OP_IF branch.",
    "OP_WITHIN": "Returns 1 if x is within the specified range (left-inclusive), 0 otherwise.",
    "OP_XOR": "Boolean exclusive or between each bit in the inputs. <em>disabled</em>."
  },
  "paste": {
    "button": {
      "default": "Paste Content",
      "payInvoice": "Pay Invoice",
      "payLightningInvoice": "Pay Lightning Invoice",
      "processContent": "Process Content",
      "processEcashToken": "Process Ecash Token",
      "processLightning": "Process Lightning",
      "processLnurl": "Process LNURL",
      "sendToAddress": "Send to Address",
      "signPsbt": "Sign PSBT"
    },
    "description": {
      "bitcoin": "Paste Bitcoin addresses, payment requests, or PSBTs",
      "default": "Paste content from clipboard",
      "ecash": "Paste ecash tokens, Lightning invoices, or LNURL payment requests",
      "lightning": "Paste Lightning invoices or LNURL payment requests"
    },
    "error": {
      "failed": "Failed to process pasted content",
      "invalidContent": "Invalid content for this context",
      "loadFailed": "Failed to load clipboard content",
      "noContent": "No content to paste",
      "success": "Content pasted successfully",
      "validateFailed": "Failed to validate content"
    },
    "title": {
      "bitcoin": "Paste Bitcoin Content",
      "default": "Paste Content",
      "ecash": "Paste Ecash Content",
      "lightning": "Paste Lightning Content"
    },
    "validation": {
      "empty": "Clipboard is empty",
      "invalid": "Invalid content for this context",
      "valid": "Valid content detected"
    }
  },
  "preview": {
    "btnCollapse": "Collapse",
    "btnExpand": "Expand",
    "contents": "Contents",
    "decoded": "Decoded",
    "descriptionFlag": "This is a 1-byte flag that follows the marker in transactions with witness data. It must be non-zero. It can be interpreted as a bitvector, with the unused bits available for future extensibility for other types of witness data.",
    "descriptionLocktime": "This is a 4-byte little-endian number that specifies the absolute locktime of the transaction.",
    "descriptionMarker": "This is a 1-byte marker (required to be '00') that serves as an indicator that the given transaction incorporates Segregated Witness (segwit) data.",
    "descriptionTxInHash": "This is the hash of the transaction input. Note that the transaction hash here is in big-endian format, whereas in other places it is typically represented in little-endian format.",
    "descriptionTxInIndex": "This is a 4-byte little-endian integer which represents the index of the specific output in the previous transaction.",
    "descriptionTxInScript": "This is the unlocking script (scriptSig), providing proof of ownership of the bitcoins being spent.",
    "descriptionTxInScriptVarInt": "This is a variable integer (VarInt) that denotes the length of the subsequent unlocking script.",
    "descriptionTxInSequence": "This is a 4-byte little-endian number that specifies the relative locktime of the transaction input.",
    "descriptionTxInVarInt": "This is a variable integer (VarInt) that denotes the number of subsequent transaction inputs.",
    "descriptionTxOutScript": "This is the locking script (scriptPubKey), specifying the conditions under which the output can be spent.",
    "descriptionTxOutScriptNonStandard": "This scriptPubKey is non-standard and therefore cannot be encoded as an address.",
    "descriptionTxOutScriptStandard": "This scriptPubkey is a standard type and can be encoded as the following address: %{address}",
    "descriptionTxOutScriptVarInt": "This is a variable integer (VarInt) that denotes the length (in bytes) of the subsequent locking script.",
    "descriptionTxOutValue": "This is an 8-byte little-endian number that represents the amount of bitcoin to be sent in satoshis.",
    "descriptionTxOutVarInt": "This is a variable integer (VarInt) that denotes the number of subsequent transaction outputs.",
    "descriptionVersion": "This is a 4-byte little-endian integer, representing the transaction version.",
    "descriptionWitnessItem": "This is a witness item.",
    "descriptionWitnessItemEmpty": "This witness item is empty.",
    "descriptionWitnessItemPubkey": "This witness item is a public key.",
    "descriptionWitnessItemScript": "This witness item is a script.",
    "descriptionWitnessItemSignature": "This witness item is a signature.",
    "descriptionWitnessItemsVarInt": "This is a variable integer (VarInt) that denotes the length (in bytes) of the subsequent witness item.",
    "descriptionWitnessVarInt": "This is a variable integer (VarInt) that indicates the number of witness items for the transaction input. Note that each segwit input has its own witnessVarInt. The order of the witness items is the same as the order of the transaction inputs.",
    "detailsChart": "Transaction flow",
    "detailsTitle": "Transaction details",
    "editLabelTransaction": "Edit transaction label",
    "editLabelUtxo": "Edit UTXO label",
    "empty": "The script is empty",
    "error": "Unable to decode the script",
    "errorAddressInvalid": "Invalid address",
    "errorBip21InsufficientSats": "Insufficient sats for amount in address",
    "errorInsufficientInputs": "Amount exceed max with selected inputs. Add more inputs.",
    "exportNFC": "Export NFC",
    "exportingNFC": "Exporting via NFC",
    "fee": "Fee",
    "feeBytes": "Fee sat/b",
    "feeVBytes": "Fee sat/vb",
    "fetchFromNip17group": "FETCH FROM NIP-17 GROUP",
    "hash": "Hash",
    "id": "Transaction id",
    "inputCount": "Number of inputs",
    "inputPlural": "Inputs",
    "inputPreviousOutputTransaction": "Previous transaction output hash",
    "inputPreviousOutputVout": "Output index in transaction",
    "inputScriptSig": "ScriptSig",
    "inputSequence": "Sequence",
    "inputSingular": "Input",
    "inputTitle": "Input",
    "keyInput": "Input your secret private key to sign the transaction",
    "label": "Label",
    "labelFlag": "Flag",
    "labelLocktime": "LockTime",
    "labelMarker": "Marker",
    "labelTxInHash": "Input previous tx hash (input %{input})",
    "labelTxInIndex": "Input previous output index (input %{input})",
    "labelTxInScript": "Input signature script (input %{input})",
    "labelTxInScriptVarInt": "Input script length (input %{input})",
    "labelTxInSequence": "Input sequence (input %{input})",
    "labelTxInVarInt": "Input count",
    "labelTxOutScript": "Output unlocking script (output %{output})",
    "labelTxOutScriptNonStandard": "Output unlocking script (output %{output})",
    "labelTxOutScriptStandard": "Output unlocking script (output %{output})",
    "labelTxOutScriptVarInt": "Output script length (output %{output})",
    "labelTxOutValue": "Output value (output %{output})",
    "labelTxOutVarInt": "Output count",
    "labelVersion": "Version",
    "labelWitnessItem": "Witness item (input %{input} witness %{witness})",
    "labelWitnessItemEmpty": "Witness item (input %{input} witness %{witness})",
    "labelWitnessItemPubkey": "Witness item (input %{input} witness %{witness})",
    "labelWitnessItemScript": "Witness item (input %{input} witness %{witness})",
    "labelWitnessItemSignature": "Witness item (input %{input} witness %{witness})",
    "labelWitnessItemsVarInt": "Witness item length (input %{input} witness %{witness})",
    "labelWitnessVarInt": "Witness count",
    "loadHistory": "Load History",
    "nfcExportTip": "Keep the NFC tag steady and close to the device. Make sure the tag is writable and has enough space.",
    "nfcExported": "Exported via NFC",
    "nfcImported": "Imported via NFC",
    "nip17group": "NIP-17 GROUP",
    "nip17groupComingSoon": "NIP-17 GROUP import coming soon",
    "noKey": "Missing private key",
    "noLabel": "No label",
    "noTags": "No tags",
    "outputCount": "Number of outputs",
    "outputTitle": "Output",
    "preview.cosignerActions": "Cosigner Actions",
    "preview.exportForExternalSigning": "Export for External Signing",
    "preview.importSignedPSBT": "Import Signed PSBT",
    "preview.multisigSignatureRequired": "Multisig Signature Required",
    "preview.showUR": "Show UR",
    "preview.signWithLocalKey": "Sign with Local Key",
    "preview.signaturesCollected": "Signatures Collected",
    "preview.signaturesRemaining": "Signatures Remaining",
    "preview.signedPsbt": "Signed PSBT",
    "preview.urFormat": "UR Format (CBOR-encoded PSBT)",
    "removeOutputTitle": "Remove output",
    "saveOutputTitle": "Save output",
    "selectCustomAmount": "Custom amount",
    "selectSpendableOutputs": "Select spendable outputs",
    "setFee": "Set fee",
    "setHighestFeePossible": "Set Highest Fee Possible",
    "setMinimumAutomaticFee": "Set Minimum Automatic Fee",
    "showQR": "Show QR",
    "signMessage": "Message",
    "signMessageId": "Message Id",
    "signWithSeedWords": "Sign with Seed Words",
    "signed": "Message Signed",
    "signingMessage": "Signing message",
    "size": "Raw size",
    "title": "Decoded",
    "txid": "Txid",
    "typeCustomAmount": "Type custom amount for automatic selection",
    "typeLabel": "Type label",
    "unlockingScript": "Unlocking script",
    "unspent": "Unspent",
    "updateFeeTitle": "Change fee",
    "updateOutputs": "Remove or decrease outputs",
    "value": "Value",
    "version": "Version",
    "vout": "Out",
    "vsize": "Virtual size",
    "weight": "Weight"
  },
  "publicKey": {
    "currentFormat": "Current Format: %{format}",
    "selectFormat": "Select Format",
    "title": "Public Key",
    "vsize": "Virtual size",
    "weight": "Weight"
  },
  "qrcode": {
    "scan.progress": "QR Code Scan Progress",
    "scan.reset": "Reset Scan"
  },
  "receive": {
    "address": "Address",
    "bitcoinPrefix": "No Prefix",
    "customAmount": "Custom amount",
    "error.exportNFC": "Failed to export via NFC",
    "error.generateAddress": "Failed to generate new address",
    "excludeLabel": "No Label",
    "exportViaNFC": "Export via NFC",
    "findingFreshAddress": "Finding a fresh address",
    "generateAnother": "Generate another address",
    "includeLabel": "Label",
    "label": "Label",
    "neverUsed": "Never used",
    "noPrefix": "Prefix",
    "pasteAmount": "Paste Amount",
    "pasteLabel": "Paste Label",
    "path": "Path",
    "placeholder.label": "Enter label (saved automatically)",
    "placeholder.sats": "sats",
    "stopNFC": "Stop NFC",
    "success.exportNFC": "Address exported via NFC"
  },
  "script": {
    "p2pkh.description.1": "Legacy",
    "p2pkh.description.2": "which locks bitcoin to the hash of a public key.",
    "p2pkh.link.name": "ScriptPubKey",
    "p2pkh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2pkh.name": "Legacy",
    "p2sh-p2wpkh.description.1": "Nested Segwit",
    "p2sh-p2wpkh.description.2": "which locks bitcoin to a SegWit witness program wrapped inside a P2SH address. This allows SegWit compatibility with wallets or services that do not fully support SegWit.",
    "p2sh-p2wpkh.link.name": "ScriptPubKey",
    "p2sh-p2wpkh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2sh-p2wpkh.name": "Nested Segwit",
    "p2sh-p2wsh.description.1": "P2SH-P2WSH",
    "p2sh-p2wsh.description.2": "which locks bitcoin to a SegWit witness script wrapped inside a P2SH address. It enables SegWit multisig compatibility with wallets that don't fully support SegWit.",
    "p2sh-p2wsh.link.name": "ScriptPubKey",
    "p2sh-p2wsh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2sh-p2wsh.name": "P2SH-P2WSH",
    "p2sh.description.1": "P2SH",
    "p2sh.description.2": "which locks bitcoin to the hash of a script. It enables complex spending conditions like multisig.",
    "p2sh.link.name": "ScriptPubKey",
    "p2sh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2sh.name": "P2SH",
    "p2tr.description.1": "Taproot",
    "p2tr.description.2": "which locks bitcoin to a Schnorr public key or a Merkle root of multiple conditions. It enhances privacy and efficiency by combining spending conditions into a single structure.",
    "p2tr.link.name": "ScriptPubKey",
    "p2tr.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2tr.name": "Taproot",
    "p2wpkh.description.1": "Native Segwit",
    "p2wpkh.description.2": "which locks bitcoin to a SegWit witness program. It offers reduced transaction fees and improved malleability resistance.",
    "p2wpkh.link.name": "ScriptPubKey",
    "p2wpkh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2wpkh.name": "Native Segwit",
    "p2wsh.description.1": "P2WSH",
    "p2wsh.description.2": "which locks bitcoin to a SegWit witness script. It enables native SegWit multisig with improved efficiency and security.",
    "p2wsh.link.name": "ScriptPubKey",
    "p2wsh.link.url": "https://river.com/learn/terms/s/scriptpubkey/",
    "p2wsh.name": "P2WSH"
  },
  "send": {
    "broadcast": "Broadcast transaction"
  },
  "sent": {
    "broadcasted": "Transaction broadcasted",
    "copyTransactionId": "Copy transaction id",
    "trackOnChain": "Track on chain"
  },
  "settings": {
    "about.description": "App version and other versioning information",
    "about.title": "About",
    "developer.accountsDeleted": "Accounts deleted",
    "developer.deleteAccounts": "Delete accounts",
    "developer.description": "Available in dev mode only. Useful tools for developers for faster development",
    "developer.skipPin": "Skip PIN",
    "developer.title": "Developer",
    "features.bip39.description": "Default language used in mnemonic from BIP39 word list",
    "features.bip39.longDescription": "Select the default language for the word list used in mnemonic seed from BIP39 when creating a new account.",
    "features.bip39.title": "Mnemonic Seed Language",
    "features.charts.historyChart.description": "Control the visible layers and navigation of the transaction history chart",
    "features.charts.historyChart.layers.showAmounts": "Show Amounts",
    "features.charts.historyChart.layers.showLabels": "Show Labels",
    "features.charts.historyChart.layers.showOutputFields": "Show Output Fields",
    "features.charts.historyChart.layers.showTransactionInfo": "Show Transaction Info",
    "features.charts.historyChart.layers.title": "Layers",
    "features.charts.historyChart.navigation.lockZoomXAxis": "Lock Zoom To X-Axis",
    "features.charts.historyChart.navigation.title": "Navigation",
    "features.charts.historyChart.title": "History Chart",
    "features.currencyFormatting.description": "Currency display and formatting",
    "features.currencyFormatting.showZeroPadding": "Show 0.00.. padding",
    "features.currencyFormatting.title": "Currency Formatting",
    "features.description": "Reveal more or less information about the app and the bitcoin protocol.",
    "features.title": "Features",
    "network.backend.electrum.description": "Node connection",
    "network.backend.esplora.description": "Data exchange",
    "network.comparison.mainnet.description": "The Bitcoin network running since 2009.",
    "network.comparison.mainnet.title": "MainNet",
    "network.comparison.mainnet.useCase": "The decentralized permissionless network for monetary transactions.",
    "network.comparison.mutinynet.description": "A public Signet instance designed by the creators of Mutiny Wallet.",
    "network.comparison.mutinynet.title": "MutinyNet",
    "network.comparison.mutinynet.useCase": "Fast Lightning Network testing. Blocks mined by MutinyNet every 30 seconds.",
    "network.comparison.regtest.description": "Any testing network running on a single machine on a local network.",
    "network.comparison.regtest.title": "RegTest",
    "network.comparison.regtest.useCase": "Local testing fully controlled by developer. Blocks mined by developer arbitrarly.",
    "network.comparison.signet.description": "Any public centralized testing network with predictable, more reliable environment.",
    "network.comparison.signet.title": "SigNet",
    "network.comparison.signet.useCase": "Stable testing network mimicking mainnet. Blocks mined by thirdy-party every 10 minutes in average.",
    "network.comparison.simnet.description": "Any RegTest designed to more closely resemble/simulate a real network environment.",
    "network.comparison.simnet.title": "SimNet",
    "network.comparison.simnet.useCase": "Local testing useful for working with BTCD and LN. Blocks mined by developer every 10 minutes in average.",
    "network.comparison.testnet3.description": "An operational public decentralized testing network. This instance was the primary testnet over a decade. However, vulnerabilities have harmed its usefulness.",
    "network.comparison.testnet3.title": "TestNet3",
    "network.comparison.testnet3.useCase": "Testing network mimicking mainnet. Blocks mined by miners every 10 minutes (the actual time is unstable and unreliable).",
    "network.comparison.testnet4.description": "An operational public decentralized testing network, meant to be the successor of Testnet3.",
    "network.comparison.testnet4.title": "TestNet4",
    "network.comparison.testnet4.useCase": "Testing network mimicking mainnet. Blocks mined by miners every 10 minutes in average (stable).",
    "network.comparison.testnetInfo": "Both RegTest and SimNet can be used as TestNet backends in network settings.",
    "network.comparison.title": "Bitcoin Networks",
    "network.comparison.usage": "Usage:",
    "network.config.connectionMode.auto": "Auto",
    "network.config.connectionMode.label": "Connection mode",
    "network.config.connectionMode.manual": "Manual",
    "network.config.connectionTestInterval": "Connection test interval",
    "network.config.connectionTestIntervalNotice": "Only works when autoconnection is on",
    "network.config.description": "Customize network parameters",
    "network.config.retries": "Retries",
    "network.config.stopGap": "Stop Gap",
    "network.config.timeout": "Timeout",
    "network.config.title": "Parameters",
    "network.custom.title": "Custom Backend",
    "network.description": "Connect to a node to communicate with the bitcoin main network, testnet or signet",
    "network.explorer.description": "Select servers used in explorer",
    "network.explorer.fullDescription": "Select Mempool-compatible servers which will be used in Explorer, mining and other pages.",
    "network.explorer.title": "Explorer",
    "network.networkComparisonLink": "Learn more about bitcoin networks",
    "network.server.backend": "Backend",
    "network.server.custom.add": "Add custom",
    "network.server.description": "Select backend to connect to the network",
    "network.server.host": "Host",
    "network.server.network": "Bitcoin Network",
    "network.server.port": "Port",
    "network.server.protocol": "Protocol",
    "network.server.server.modal.title": "Select server",
    "network.server.server.warning.text": "Your data requests relating to wallet addresses, transactions, and utxos will go out to potentially untrusted server.",
    "network.server.server.warning.title": "Warning",
    "network.server.test": "Test connection",
    "network.server.tester.error": "Connection test error",
    "network.server.tester.failed": "Connection test failed",
    "network.server.tester.success": "Connection test successful",
    "network.server.title": "Backend",
    "network.server.type.bitcoin": "Bitcoin mainnet",
    "network.server.type.signet": "Centralized network used for testing (coins have no value)",
    "network.server.type.testnet": "Decentralized network used for testing (coins have no value)",
    "network.server.url": "Url",
    "network.title": "Bitcoin Network",
    "security.appPin": "App Pin",
    "security.backgroundLockTime": "Background lock time threshold",
    "security.changePin": "Change pin",
    "security.description": "Change app wide security settings to protect access in case of a compromised device",
    "security.duressPin": "Duress Pin",
    "security.duressPinEnabled": "Enable duress pin",
    "security.duressPinSet": "Set duress pin",
    "security.duressPinText1": "Upon unlocking the app using duress pin:",
    "security.duressPinText2": "All account data is deleted.",
    "security.duressPinText3": "Your duress pin becomes your new pin.",
    "security.duressPinText4": "Duress pin is deleted and disabled.",
    "security.maxPinTries": "Maximum pin tries",
    "security.seed": "Seed",
    "security.skipSeedConfirmation": "Allow skipping seed word confirmation",
    "security.title": "App Security",
    "title": "App Settings"
  },
  "sign": {
    "transaction": "Sign transaction"
  },
  "time": {
    "day": "1 day",
    "dayAgo": "1 day ago",
    "days": "%{value} days",
    "daysAgo": "%{value} days ago",
    "hour": "1 hour",
    "hourAgo": "1 hour ago",
    "hours": "%{value} hours",
    "hoursAgo": "%{value} hours ago",
    "justNow": "just now",
    "lessThanAMinute": "Less than a minute",
    "minute": "1 minute",
    "minuteAgo": "1 minute ago",
    "minutes": "%{value} minutes",
    "month": "1 month",
    "monthAgo": "1 month ago",
    "months": "%{value} months",
    "monthsAgo": "%{value} months ago",
    "week": "1 week",
    "weekAgo": "1 week ago",
    "weeks": "%{value} weeks",
    "weeksAgo": "%{value} weeks ago",
    "year": "1 year",
    "yearAgo": "1 year ago",
    "years": "%{value} years",
    "yearsAgo": "%{value} years ago"
  },
  "transaction": {
    "address": "Address",
    "block": "In block",
    "build.add.input.title": "Edit inputs",
    "build.add.inputs.title.1": "Add inputs",
    "build.add.inputs.title.2": "Add as input to transaction",
    "build.add.label.title": "Add label",
    "build.add.output.number": "Output %{number}",
    "build.add.output.title": "Add output",
    "build.change": "Change",
    "build.errors.noOutputSelected.autoUtxoSelection": "Please add an output first to use this auto utxo selection algorithm",
    "build.insufficientSats": "Insufficient sats",
    "build.minerFee": "Miner fee",
    "build.options.autoSelect.utxos.efficiency.description": "Selection of inputs that won't produce dust change and will occupy the least amount of space.",
    "build.options.autoSelect.utxos.efficiency.title": "Efficiency",
    "build.options.autoSelect.utxos.label": "Auto select utxos for",
    "build.options.autoSelect.utxos.privacy.description": "Best possible transaction template that breaks as many heuristics as possible.",
    "build.options.autoSelect.utxos.privacy.title": "Privacy",
    "build.options.autoSelect.utxos.user.description": "Your user selected inputs",
    "build.options.autoSelect.utxos.user.title": "User",
    "build.options.feeControl": "Fee Control",
    "build.options.feeManagement": "Fee Management",
    "build.options.importOutputs.button": "Import",
    "build.options.importOutputs.clipboard": "Paste",
    "build.options.importOutputs.emptyContent": "Preview of outputs will appear here...",
    "build.options.importOutputs.qrcode": "Scan QRCode",
    "build.options.importOutputs.title": "Import Outputs",
    "build.options.timeLock": "Time Lock",
    "build.options.timelock": "Timelock",
    "build.options.title": "Options",
    "build.preview.contents": "Contents",
    "build.preview.decoded": "Decoded",
    "build.preview.keyInput": "Input your secret private key to sign the transaction",
    "build.preview.noKey": "Missing private key",
    "build.preview.psbt": "PSBT: Share partially signed bitcoin transaction on external hardware",
    "build.remove.output.title": "Remove output",
    "build.save.output.title": "Save output",
    "build.select.customAmount": "Custom amount",
    "build.select.spendableOutputs": "Select spendable outputs",
    "build.selfSend": "Self-send",
    "build.set.fee": "Set fee",
    "build.set.highestFeePossible": "Set Highest Fee Possible",
    "build.set.minimumAutomaticFee": "Set Minimum Automatic Fee",
    "build.sign.message": "Message",
    "build.sign.messageId": "Message Id",
    "build.sign.readyToBroadcast": "Ready to Broadcast",
    "build.sign.signed": "Message Signed",
    "build.sign.signing": "Signing message",
    "build.type.customAmount": "Type custom amount for automatic selection",
    "build.type.label": "Type label",
    "build.unspent": "Unspent",
    "build.update.fee.title": "Change fee",
    "build.update.outputs": "Remove or decrease outputs",
    "checkStatus": "Check Status",
    "decoded.btnCollapse": "Collapse",
    "decoded.btnExpand": "Expand",
    "decoded.description.flag": "This is a 1-byte flag that follows the marker in transactions with witness data. It must be non-zero. It can be interpreted as a bitvector, with the unused bits available for future extensibility for other types of witness data.",
    "decoded.description.locktime": "This is a 4-byte little-endian number that specifies the absolute locktime of the transaction.",
    "decoded.description.marker": "This is a 1-byte marker (required to be '00') that serves as an indicator that the given transaction incorporates Segregated Witness (segwit) data.",
    "decoded.description.txInHash": "This is the hash of the transaction input. Note this is represented in little-endian in a raw bitcoin transaction, but most user applications show it in big-endian.",
    "decoded.description.txInIndex": "This is a 4-byte little-endian integer which represents the index of the specific output in the previous transaction.",
    "decoded.description.txInScript": "This is the unlocking script (scriptSig), providing proof of ownership of the bitcoins being spent.",
    "decoded.description.txInScriptVarInt": "This is a variable integer (VarInt) that denotes the length of the subsequent unlocking script.",
    "decoded.description.txInSequence": "This is a 4-byte little-endian number that specifies the relative locktime of the transaction input.",
    "decoded.description.txInVarInt": "This is a variable integer (VarInt) that denotes the number of subsequent transaction inputs.",
    "decoded.description.txOutScript": "This is the locking script (scriptPubKey), specifying the conditions under which the output can be spent.",
    "decoded.description.txOutScriptNonStandard": "This scriptPubKey is non-standard and therefore cannot be encoded as an address.",
    "decoded.description.txOutScriptStandard": "This scriptPubkey is a standard type and can be encoded as the following address: %{address}",
    "decoded.description.txOutScriptVarInt": "This is a variable integer (VarInt) that denotes the length (in bytes) of the subsequent locking script.",
    "decoded.description.txOutValue": "This is an 8-byte little-endian number that represents the amount of bitcoin to be sent in satoshis.",
    "decoded.description.txOutVarInt": "This is a variable integer (VarInt) that denotes the number of subsequent transaction outputs.",
    "decoded.description.version": "This is a 4-byte little-endian integer, representing the transaction version.",
    "decoded.description.witnessItem": "This is a witness item.",
    "decoded.description.witnessItemEmpty": "This witness item is empty.",
    "decoded.description.witnessItemPubkey": "This witness item is a public key.",
    "decoded.description.witnessItemScript": "This witness item is a script.",
    "decoded.description.witnessItemSignature": "This witness item is a signature.",
    "decoded.description.witnessItemsVarInt": "This is a variable integer (VarInt) that denotes the length (in bytes) of the subsequent witness item.",
    "decoded.description.witnessVarInt": "This is a variable integer (VarInt) that indicates the number of witness items for the transaction input. Note that each segwit input has its own witnessVarInt. The order of the witness items is the same as the order of the transaction inputs.",
    "decoded.empty": "The script is empty",
    "decoded.error": "Unable to decode the script",
    "decoded.label.flag": "Flag",
    "decoded.label.locktime": "LockTime",
    "decoded.label.marker": "Marker",
    "decoded.label.txInHash": "Input previous tx hash (input %{input})",
    "decoded.label.txInIndex": "Input previous output index (input %{input})",
    "decoded.label.txInScript": "Input signature script (input %{input})",
    "decoded.label.txInScriptVarInt": "Input script length (input %{input})",
    "decoded.label.txInSequence": "Input sequence (input %{input})",
    "decoded.label.txInVarInt": "Input count",
    "decoded.label.txOutScript": "Output unlocking script (output %{output})",
    "decoded.label.txOutScriptNonStandard": "Output unlocking script (output %{output})",
    "decoded.label.txOutScriptStandard": "Output unlocking script (output %{output})",
    "decoded.label.txOutScriptVarInt": "Output script length (output %{output})",
    "decoded.label.txOutValue": "Output value (output %{output})",
    "decoded.label.txOutVarInt": "Output count",
    "decoded.label.version": "Version",
    "decoded.label.witnessItem": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemEmpty": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemPubkey": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemScript": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemSignature": "Witness item (input %{input} witness %{witness})",
    "decoded.label.witnessItemsVarInt": "Witness item length (input %{input} witness %{witness})",
    "decoded.label.witnessVarInt": "Witness count",
    "decoded.title": "Decoded",
    "details.chart": "Transaction flow",
    "details.title": "Transaction details",
    "edit.label.transaction": "Edit transaction label",
    "edit.label.utxo": "Edit UTXO label",
    "error.ChangeAddressNotAvailable": "Change address not available. Please try again.",
    "error.address.invalid": "Invalid address",
    "error.bip21.insufficientSats": "Insufficient sats for amount in address",
    "error.insufficientInputs": "Amount exceed max with selected inputs. Add more inputs.",
    "exportNFC": "Export NFC",
    "fee": "Fee",
    "feeBytes": "Fee sat/b",
    "feeVBytes": "Fee sat/vb",
    "fetchFromNip17group": "FETCH FROM NIP-17 GROUP",
    "hash": "Hash",
    "id": "Transaction id",
    "input.count": "Number of inputs",
    "input.plural": "Inputs",
    "input.previousOutput.transaction": "Previous transaction output hash",
    "input.previousOutput.vout": "Output index in transaction",
    "input.scriptSig": "ScriptSig",
    "input.sequence": "Sequence",
    "input.singular": "Input",
    "input.title": "Input",
    "label": "Label",
    "loadHistory": "Load History",
    "loadSankey": "Load Sankey Diagram",
    "nip17group": "NIP-17 GROUP",
    "nip17groupComingSoon": "NIP-17 GROUP import coming soon",
    "noLabel": "No label",
    "noTags": "No tags",
    "output.count": "Number of outputs",
    "output.title": "Output",
    "preview.PSBT": "PSBT",
    "preview.SignWithSeedQR": "Sign with Seed QR",
    "preview.checkAllSignatures": "CHECK ALL SIGNATURES",
    "preview.cosignerActions": "Cosigner Actions",
    "preview.exportForExternalSigning": "Export for External Signing",
    "preview.exportNFC": "Export NFC",
    "preview.exportUnsigned": "Export unsigned",
    "preview.fetchFromNip17group": "FETCH FROM NIP-17 GROUP",
    "preview.importSigned": "Import signed",
    "preview.importSignedPSBT": "Import Signed PSBT",
    "preview.multisigSignatureRequired": "Multisig Signature Required",
    "preview.nfcTip": "Hold your device near another NFC-enabled device",
    "preview.nip17group": "NIP-17 GROUP",
    "preview.nip17groupComingSoon": "NIP-17 GROUP import coming soon",
    "preview.rawPSBT": "Raw PSBT",
    "preview.readyForFinalization": "Ready for finalization",
    "preview.scanAllChunks": "Chunk %{current} of %{total}",
    "preview.showBBQR": "Show BBQR",
    "preview.showQR": "Show QR",
    "preview.showRaw": "Show Raw",
    "preview.showUR": "Show UR",
    "preview.signWithLocalKey": "Sign with Local Key",
    "preview.signature": "Signature",
    "preview.signatureCompleted": "Signature Completed",
    "preview.signaturesCollected": "Signatures Collected",
    "preview.signaturesRemaining": "Signatures Remaining",
    "preview.signedPsbt": "Signed PSBT",
    "preview.singleChunk": "Single Chunk",
    "preview.urFormat": "UR Format (CBOR-encoded PSBT)",
    "showQR": "Show QR",
    "signWithSeedWords": "Sign with Seed Words",
    "size": "Raw size",
    "txid": "Txid",
    "unlockingScript": "Unlocking script",
    "value": "Value",
    "version": "Version",
    "vout": "Out",
    "vsize": "Virtual size",
    "weight": "Weight"
  },
  "upcoming": {
    "bitcoin.description": "Visualise the latest blocks and mempool key points",
    "bitcoin.title": "Bitcoin Features",
    "block.description": "Visualise the latest blocks and mempool key points",
    "block.title": "Block Features",
    "chain.description_1": "Explore the chain in 3D.",
    "chain.description_2": "See where your UTXOs are stored.",
    "chain.description_3": "Overlay on UTXO.live chart.",
    "chain.title_1": "Chain",
    "chain.title_2": "Chain",
    "chain.title_3": "Chain",
    "chaintip.description": "Visualise the latests block.",
    "chaintip.title": "Chaintip",
    "currency.description_1": "Convert to other fiat currencies",
    "currency.description_2": "Scrub through the historical price of bitcoin.",
    "currency.title_1": "Currency",
    "currency.title_2": "Currency",
    "description": "Visualise the latest blocks and mempool key points",
    "difficulty.description": "Visualise 2016 blocks and the 2 week target",
    "difficulty.title": "Difficulty",
    "ecash.description_1": "User defined mints top mints",
    "ecash.description_2": "Connect to services and protocols that bridge between eachother",
    "ecash.title_1": "ECash",
    "ecash.title_2": "Onboard",
    "energy.description_1": "Turn any device into a miner.",
    "energy.description_2": "Prepare for a future with phone ASIC mining.",
    "energy.title_1": "Energy",
    "energy.title_2": "Energy",
    "halving.description_1": "Verify the current supply of bitcoin.",
    "halving.description_2": "Check where UTXOs exist on each cycle.",
    "halving.title_1": "Halving",
    "halving.title_2": "Halving",
    "lightning.description_1": "Create and manage channels visually.",
    "lightning.description_2": "Create and manage channels visually.",
    "lightning.description_3": "Balance channel liquidity intuitively.",
    "lightning.description_4": "Track the nodes your payment will pass through.",
    "lightning.description_5": "Understand channel balances at a glance.",
    "lightning.description_6": "Scrub and seek the history of your channels with multiple granularity.",
    "lightning.title_1": "Channel Management",
    "lightning.title_2": "Channel Management",
    "lightning.title_3": "Visual Rebalancer",
    "lightning.title_4": "Payment Path",
    "lightning.title_5": "Liquidity Overview",
    "lightning.title_6": "Channel History",
    "liquid.description": "Swap between assets",
    "liquid.title": "Liquid",
    "mempool.description": "Get the latest data on the state of the mempool.",
    "mempool.title": "Mempool",
    "name": "Coming Soon",
    "nostr.description_1": "Experience NOSTR from a financial perspective. Participate in the biggest bitcoin circular economy.",
    "nostr.description_2": "Scan npubs, note and event ids, to pay. Turn any note into an invoice.",
    "nostr.description_3": "Easily zap any of your trusted contacts.",
    "nostr.title_1": "NOSTR",
    "nostr.title_2": "ZAP",
    "nostr.title_3": "Contact List",
    "time.description_1": "Time in block timeline, 24h day, Gregorian calendar.",
    "time.description_2": "Sun and Lunar calendars.",
    "time.title_1": "Time v1",
    "time.title_2": "Time v1",
    "title": "Upcoming Feature"
  },
  "utxo": {
    "address": "Address",
    "details.title": "UTXO Details",
    "group": "Group",
    "label": "Label",
    "noLabel": "No label",
    "outputIndex": "Output Index",
    "unlockingScript": "Unlocking script",
    "vout": "Output index"
  },
  "validation": {
    "invalid": "Invalid input",
    "number.greater": "The value must be greather than %{value}",
    "number.smaller": "The value must be smaller than %{value}",
    "required": "*required*"
  },
  "warning": {
    "content": "Copyright (c) 2025 SatSigner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "subtitle": "Don't trust, verify",
    "title": "This is an experimental app, use responsibly."
  },
  "watchonly": {
    "error": {
      "clipboardPaste": "Failed to paste from clipboard",
      "creationFailed": "Failed to create watch-only account",
      "emptyClipboard": "No data found in clipboard",
      "missingFields": "Please fill in all required fields"
    },
    "fingerprint.label": "Master Fingerprint",
    "fingerprint.scanQR": "Scan Fingerprint QR Code",
    "fingerprint.text": "Fingerprint",
    "importAddress.label": "Address",
    "importAddress.text": "A single bitcoin address",
    "importAddress.title": "Address",
    "importDescriptor.external": "External Descriptor",
    "importDescriptor.internal": "Internal Descriptor (optional)",
    "importDescriptor.label": "Descriptor",
    "importDescriptor.text": "A Bitcoin descriptor is a flexible and expressive way to describe how Bitcoin addresses and keys are derived and used within a wallet. Introduced in BIP 174, descriptors allow users to specify the structure of their wallets in a more human-readable format. They can represent various types of addresses, including standard pay-to-public-key-hash (P2PKH), pay-to-script-hash (P2SH), and more complex constructions such as multisig. Descriptors improve wallet interoperability and make it easier for software to understand how to derive keys and addresses based on user-defined rules.",
    "importDescriptor.title": "Descriptor",
    "importExtendedPub.label": "XPUB / YPUB / ZPUB",
    "importExtendedPub.text": "An extended public key is a type of key used in Bitcoin that allows for the generation of multiple public addresses from a single key. It is part of the hierarchical deterministic (HD) wallet structure defined by BIP32. An xpub can generate child public keys, which can be used to receive funds without exposing the corresponding private keys. This feature is useful for managing multiple addresses while maintaining privacy and security, as users can receive payments at different addresses without needing to create new wallets or expose sensitive information.",
    "importExtendedPub.title": "Extended Public Key",
    "info.vpubConverted": "Converted %{vpub} to %{tpub} format for compatibility",
    "inputPlaceholder": "Enter %{option}",
    "read.clipboard": "Paste from clipboard",
    "read.computerVision": "Computer Vision text",
    "read.nfc": "Scan NFC",
    "read.nfcErrorNoData": "No data found on NFC tag",
    "read.nfcNotAvailable": "NFC not available on this device",
    "read.qrError": "Failed to scan QR code",
    "read.qrcode": "Scan qrcode",
    "read.scanning": "Scanning NFC",
    "success.accountCreated": "Watch-only account created successfully",
    "success.clipboardPasted": "Data pasted from clipboard successfully",
    "success.nfcRead": "NFC data read successfully",
    "success.qrScanned": "QR code scanned successfully",
    "titleModal": "Watch-only wallet",
    "warning.syncFailed": "Account created but failed to sync. You can try syncing later."
  }
}
